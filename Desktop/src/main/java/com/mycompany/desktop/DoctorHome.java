/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.desktop;

import com.mycompany.desktop.models.DateTimePickerDialog;
import com.google.gson.JsonObject;
import com.mycompany.desktop.API.APIClient;
import com.mycompany.desktop.API.AuthService;
import static com.mycompany.desktop.AdminHome.compressImage;
import com.mycompany.desktop.JPanel.DoctorJPanel;
import com.mycompany.desktop.JPanel.PatientJPanel;
import com.mycompany.desktop.JPanel.PatientJPanel.PatientUpdateListener;
import com.mycompany.desktop.models.Admin;
import com.mycompany.desktop.models.Appointment;
import com.mycompany.desktop.models.AvatarResponse;
import com.mycompany.desktop.models.CombinedResultWrapper;
import com.mycompany.desktop.models.Department;
import com.mycompany.desktop.models.Doctor;
import com.mycompany.desktop.models.DoctorSchedule;
import com.mycompany.desktop.models.NotificationCreate;
import com.mycompany.desktop.models.Patient;
import com.mycompany.desktop.models.PatientHealthMetrics;
import com.mycompany.desktop.utils.DateUtils;
import com.mycompany.desktop.utils.SessionManager;
import com.mycompany.desktop.utils.ValidationUtils;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;
import javax.imageio.IIOImage;
import javax.imageio.ImageIO;
import javax.imageio.ImageWriteParam;
import javax.imageio.ImageWriter;
import javax.imageio.stream.ImageOutputStream;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.RequestBody;
import okhttp3.ResponseBody;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;

/**
 *
 * @author admin
 */
public class DoctorHome extends javax.swing.JFrame {

    private AuthService authService;
    private Doctor doctor;
    private int user_id;
    private List<DoctorSchedule> listDoctorSchedules;
    private List<Appointment> listAppointments;
    private List<Department> listDepartments;

    private Calendar calendar;
    private int weekSchedules;

    public DoctorHome(int user_id) {
        initComponents();
        this.user_id = user_id;
        SessionManager.getInstance().setCurrentUserId(user_id);
        calendar = Calendar.getInstance();

        authService = APIClient.getAuthService();
        loadDoctorProfile();
        loadListDoctorSchedul(user_id);

        // Lấy đối tượng Date
        Date date = calendar.getTime();
        // Định dạng thành chuỗi yyyy-MM-dd
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String formattedDate = sdf.format(date);
        loadListAppointments(formattedDate);

        
        Timer timer = new Timer();
        timer.schedule(new TimerTask() {
            @Override
            public void run() {
                weekSchedules = calendar.get(Calendar.WEEK_OF_YEAR);
                setTableWeekSchedules(weekSchedules);
                setDoctor_toUI(doctor);
                loadListDepartments();
            }
        }, 5000); // 10.000 milliseconds = 10 giây

        date();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jLabel_doctor_name = new javax.swing.JLabel();
        jLabel_doctor_email = new javax.swing.JLabel();
        jButton11 = new javax.swing.JButton();
        jLabel_ngayhientai = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jTabbedPane = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_Appointments = new javax.swing.JTable();
        jLabel_date_appointment = new javax.swing.JLabel();
        jButton15 = new javax.swing.JButton();
        jButton16 = new javax.swing.JButton();
        jButton17 = new javax.swing.JButton();
        jButton18 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable_WeekSchedul = new javax.swing.JTable();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTable_DoctorSchedul = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        jLable_WeekSchedul = new javax.swing.JLabel();
        jButton12 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jLabel27 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jTextField_doctor_name = new javax.swing.JTextField();
        jTextField_doctor_phone = new javax.swing.JTextField();
        jButton13 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jTextField_doctor_brithdate = new javax.swing.JTextField();
        jPasswordField_doctor_pass = new javax.swing.JPasswordField();
        jLabel16 = new javax.swing.JLabel();
        jLabel_doctor_loi = new javax.swing.JLabel();
        jTextField_doctor_emai = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jRadioButton_doctor_nam = new javax.swing.JRadioButton();
        jRadioButton_doctor_nu = new javax.swing.JRadioButton();
        jTextField_doctor_address = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jTextField_doctor_department_id = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea_doctor_description = new javax.swing.JTextArea();
        jLabel22 = new javax.swing.JLabel();
        jLabel_doctor_avatar = new javax.swing.JLabel();
        jLable_doctor_avatar_url = new javax.swing.JLabel();
        jLabel_id_user = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jLabel_avatar_department = new javax.swing.JLabel();
        jTextField_department_name = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTextArea_department_description = new javax.swing.JTextArea();
        jTextField_department_name1 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable_departments = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();

        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel8.setBackground(new java.awt.Color(0, 102, 204));

        jLabel18.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setText("TRANG BÁC SĨ LÀM VIỆC");

        jLabel_doctor_name.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_doctor_name.setText("Tên:");

        jLabel_doctor_email.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_doctor_email.setText("Gmail:");

        jButton11.setText("Đăng xuất");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jLabel_ngayhientai.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_ngayhientai.setText("jLabel1");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel_ngayhientai)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel_doctor_name)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel_doctor_email)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton11)
                .addGap(14, 14, 14))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_doctor_name)
                    .addComponent(jLabel_doctor_email)
                    .addComponent(jButton11)
                    .addComponent(jLabel18)
                    .addComponent(jLabel_ngayhientai))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jButton1.setText("Lịch Hẹn Khám");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Thông Tin Bác Sĩ");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Đăng Xuất");

        jButton5.setText("Lịch Làm Việc");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jTabbedPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPaneMouseClicked(evt);
            }
        });

        jTable_Appointments.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jTable_Appointments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Tên", "Ngày đặt", "Thời gian", "Đặt lúc"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable_Appointments.setRowHeight(40);
        jTable_Appointments.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_AppointmentsMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jTable_AppointmentsMouseEntered(evt);
            }
        });
        jScrollPane1.setViewportView(jTable_Appointments);
        if (jTable_Appointments.getColumnModel().getColumnCount() > 0) {
            jTable_Appointments.getColumnModel().getColumn(0).setResizable(false);
            jTable_Appointments.getColumnModel().getColumn(2).setPreferredWidth(30);
        }

        jLabel_date_appointment.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel_date_appointment.setText("Lịch khám hôm nay");

        jButton15.setText("Xem tất cả");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        jButton16.setText("Ngày trước");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        jButton17.setText("Ngày sau");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        jButton18.setText("Lịch hôm nay");
        jButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton18ActionPerformed(evt);
            }
        });

        jLabel2.setText("Công cụ:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 567, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_date_appointment))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jButton15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton17, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton16, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(12, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel_date_appointment)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 614, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton17)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jTabbedPane.addTab("Lịch khám", jPanel1);

        jTable_WeekSchedul.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"7h-9h", null, null, null, null, null, null, null},
                {"9h-11h", null, null, null, null, null, null, null},
                {"13h-15h", null, null, null, null, null, null, null},
                {"15h-17h", null, null, null, null, null, null, null}
            },
            new String [] {
                "Thời gian", "T2", "T3", "T4", "T5", "T6", "T7", "CN"
            }
        ));
        jTable_WeekSchedul.setRowHeight(30);
        jScrollPane4.setViewportView(jTable_WeekSchedul);
        if (jTable_WeekSchedul.getColumnModel().getColumnCount() > 0) {
            jTable_WeekSchedul.getColumnModel().getColumn(0).setMinWidth(100);
            jTable_WeekSchedul.getColumnModel().getColumn(0).setPreferredWidth(100);
            jTable_WeekSchedul.getColumnModel().getColumn(0).setMaxWidth(100);
        }

        jTable_DoctorSchedul.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, "10-10-10-10", null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Tuần", "T2", "T3", "T4", "T5", "T6", "T7", "CN"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable_DoctorSchedul.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_DoctorSchedulMouseClicked(evt);
            }
        });
        jScrollPane9.setViewportView(jTable_DoctorSchedul);

        jLabel10.setText("Lịch toàn thời gian");

        jLable_WeekSchedul.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLable_WeekSchedul.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLable_WeekSchedul.setText("Lịch tuần - từ ngày");

        jButton12.setText("Tuần trước");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jButton14.setText("Tuần sau");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jLabel27.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel27.setText("Lịch làm việc");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(jButton12)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLable_WeekSchedul, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButton14))
                        .addComponent(jScrollPane9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 658, Short.MAX_VALUE)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING))
                    .addComponent(jLabel10)
                    .addComponent(jLabel27))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel27)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton14)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton12)
                        .addComponent(jLable_WeekSchedul)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(44, Short.MAX_VALUE))
        );

        jTabbedPane.addTab("Lịch làm việc", jPanel2);

        jTextField_doctor_phone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_doctor_phoneActionPerformed(evt);
            }
        });

        jButton13.setText("Cập nhật");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        jLabel5.setText("Name");

        jLabel6.setText("Phone");

        jLabel15.setText("BirthDate     YYYY-MM-DD");

        jPasswordField_doctor_pass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPasswordField_doctor_passActionPerformed(evt);
            }
        });

        jLabel16.setText("Password");

        jTextField_doctor_emai.setEnabled(false);
        jTextField_doctor_emai.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_doctor_emaiActionPerformed(evt);
            }
        });

        jLabel7.setText("Email");

        jRadioButton_doctor_nam.setText("Male");

        jRadioButton_doctor_nu.setText("Female");

        jLabel17.setText("Gender");

        jLabel19.setText("Address");

        jLabel20.setText("Description");

        jLabel21.setText("Department");

        jTextField_doctor_department_id.setEnabled(false);

        jTextArea_doctor_description.setColumns(20);
        jTextArea_doctor_description.setRows(3);
        jScrollPane5.setViewportView(jTextArea_doctor_description);

        jLabel22.setText("Avatar_url");

        jLabel_doctor_avatar.setText("avatar");
        jLabel_doctor_avatar.setToolTipText("");
        jLabel_doctor_avatar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel_doctor_avatarMouseClicked(evt);
            }
        });

        jLable_doctor_avatar_url.setText("file");

        jLabel_id_user.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel_id_user.setText("Thông tin cá nhân");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane5)
                            .addComponent(jTextField_doctor_emai)
                            .addComponent(jTextField_doctor_phone)
                            .addComponent(jTextField_doctor_address)
                            .addComponent(jPasswordField_doctor_pass)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel19)
                                    .addGroup(jPanel5Layout.createSequentialGroup()
                                        .addComponent(jLabel22)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLable_doctor_avatar_url))
                                    .addComponent(jLabel20)
                                    .addComponent(jLabel15)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel_doctor_loi)
                                    .addComponent(jLabel7)
                                    .addGroup(jPanel5Layout.createSequentialGroup()
                                        .addComponent(jTextField_doctor_brithdate, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(jPanel5Layout.createSequentialGroup()
                                                .addComponent(jRadioButton_doctor_nam)
                                                .addGap(32, 32, 32)
                                                .addComponent(jRadioButton_doctor_nu))
                                            .addComponent(jLabel17))))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel_doctor_avatar, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel5)
                                        .addComponent(jTextField_doctor_name, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel21)
                                    .addComponent(jTextField_doctor_department_id, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE))))
                        .addContainerGap(10, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel_id_user)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(123, 123, 123)
                .addComponent(jButton13, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jLabel_id_user)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel_doctor_avatar, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(5, 5, 5)
                        .addComponent(jTextField_doctor_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel21)
                        .addGap(4, 4, 4)
                        .addComponent(jTextField_doctor_department_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField_doctor_emai, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jTextField_doctor_phone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField_doctor_brithdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addGap(0, 0, 0)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jRadioButton_doctor_nam)
                            .addComponent(jRadioButton_doctor_nu))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField_doctor_address, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(jLable_doctor_avatar_url))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel20)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel16)
                .addGap(7, 7, 7)
                .addComponent(jPasswordField_doctor_pass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel_doctor_loi)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton13, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(124, 124, 124)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(161, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(70, Short.MAX_VALUE))
        );

        jTabbedPane.addTab("Thông tin cá nhân", jPanel3);

        jLabel_avatar_department.setText("jLabel15");

        jTextField_department_name.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jTextField_department_name.setText("Tên Khoa:");

        jTextArea_department_description.setColumns(20);
        jTextArea_department_description.setRows(3);
        jScrollPane6.setViewportView(jTextArea_department_description);

        jTextField_department_name1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jTextField_department_name1.setText("Các khoa khác:");

        jButton7.setText("Quay lại");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jTable_departments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "ID", "Tên khoa"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable_departments.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_departmentsMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTable_departments);
        if (jTable_departments.getColumnModel().getColumnCount() > 0) {
            jTable_departments.getColumnModel().getColumn(0).setMinWidth(35);
            jTable_departments.getColumnModel().getColumn(0).setPreferredWidth(35);
            jTable_departments.getColumnModel().getColumn(0).setMaxWidth(35);
            jTable_departments.getColumnModel().getColumn(1).setResizable(false);
        }

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("Tên khoa:");

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField_department_name, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addComponent(jTextField_department_name1)
                                .addGap(18, 18, 18)
                                .addComponent(jButton7))
                            .addComponent(jLabel_avatar_department, javax.swing.GroupLayout.PREFERRED_SIZE, 669, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel_avatar_department, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField_department_name)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField_department_name1)
                    .addComponent(jButton7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane.addTab("Thông tin khoa", jPanel4);

        jButton4.setText("Thông Tin Khoa");
        jButton4.setMaximumSize(new java.awt.Dimension(119, 23));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 692, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Doctor
    private void loadDoctorProfile() {
        String token = SessionManager.getInstance().getToken();

        authService.getDoctorProfile(token).enqueue(new Callback<Doctor>() {
            @Override
            public void onResponse(Call<Doctor> call, Response<Doctor> response) {
                if (response.isSuccessful() && response.body() != null) {
                    jLabel_doctor_name.setText(response.body().getFull_name());
                    jLabel_doctor_email.setText(response.body().getEmail());
                    doctor = response.body();

                    SessionManager.getInstance().setCurrentUserId(doctor.getUser_id());
                } else {
                    // Handle error
                    if (response.code() == 401) {
                        // Token expired or invalid
                        JOptionPane.showMessageDialog(null, "Session expired. Please login again.");
                        new Login().setVisible(true);
                        DoctorHome.this.dispose();
                    } else {
                        try {
                            String errorMsg = response.errorBody().string();
                            JOptionPane.showMessageDialog(null, "Failed to register!\nError: " + errorMsg + user_id);
                        } catch (IOException e) {
                            JOptionPane.showMessageDialog(null, "Failed to read error message!");
                        }
                    }
                }

            }

            @Override
            public void onFailure(Call<Doctor> call, Throwable thrwbl) {
                JOptionPane.showMessageDialog(null, "Network error");
            }
        });
    }

    private void updateDoctor() {
        String token = SessionManager.getInstance().getToken();
        Doctor getDoctor = getDoctorFromUI();

        authService.updateDoctor(token, getDoctor, user_id).enqueue(new Callback<Doctor>() {
            @Override
            public void onResponse(Call<Doctor> call, Response<Doctor> response) {
                if (response.isSuccessful()) {
                    JOptionPane.showMessageDialog(DoctorHome.this, "Thành công");
                    loadDoctorProfile();
                } else {
                    JOptionPane.showMessageDialog(DoctorHome.this, "Thất bại: " + response.code());
                }
            }

            @Override
            public void onFailure(Call<Doctor> call, Throwable thrwbl) {
                JOptionPane.showMessageDialog(DoctorHome.this, "Loi");
            }
        });
    }

    private void setDoctor_toUI(Doctor doctorResponse) {

        jLabel_id_user.setText("Thông tin bác sĩ ID: " + doctorResponse.getUser_id());

        jTextField_doctor_name.setText(doctorResponse.getFull_name());
        jTextField_doctor_emai.setText(doctorResponse.getEmail());
        jTextField_doctor_phone.setText(doctorResponse.getPhone());
        jTextField_doctor_brithdate.setText(doctorResponse.getDate_of_birth());
        String gender = doctorResponse.getGender();
        if (gender.equals("Male")) {
            jRadioButton_doctor_nam.setSelected(true);
        } else if (gender.equals("Female")) {
            jRadioButton_doctor_nu.setSelected(true);
        }
        jLable_doctor_avatar_url.setText(doctorResponse.getAvatar_url());
        downloadAvatar();

        jTextArea_doctor_description.setText(doctorResponse.getDescription());
        jTextArea_doctor_description.setLineWrap(true);
        jTextArea_doctor_description.setWrapStyleWord(true);
        jTextField_doctor_address.setText(doctorResponse.getAddress());

        jTextField_doctor_department_id.setText(doctorResponse.getDepartment_name());
        jPasswordField_doctor_pass.setText("");
    }

    private Doctor getDoctorFromUI() {
        Doctor getDoctor = new Doctor();
        char[] passChars = jPasswordField_doctor_pass.getPassword();
        String password = new String(passChars);

        // Kiểm tra dữ liệu nhập vào
        getDoctor.setFull_name(jTextField_doctor_name.getText().trim());
        getDoctor.setEmail(jTextField_doctor_emai.getText().trim());
        getDoctor.setPhone(jTextField_doctor_phone.getText().trim());
        getDoctor.setDate_of_birth(jTextField_doctor_brithdate.getText().trim());

        if (jRadioButton_doctor_nam.isSelected()) {
            getDoctor.setGender("Male");
        } else if (jRadioButton_doctor_nu.isSelected()) {
            getDoctor.setGender("Female");
        }

        if (!password.isEmpty()) {
            getDoctor.setPassword(password);
        }

        getDoctor.setAddress(jTextField_doctor_address.getText().trim()); // Nếu có trường địa chỉ
        getDoctor.setDescription(jTextArea_doctor_description.getText().trim());
        getDoctor.setDepartment_id(doctor.getDepartment_id());

        return getDoctor;
    }

    //doctorSchedul
    private void loadListDoctorSchedul(int doctor_id) {
        String token = SessionManager.getInstance().getToken();
        listDoctorSchedules = new ArrayList<>();
        authService.getSchedule(token, doctor_id).enqueue(new Callback<List<DoctorSchedule>>() {
            @Override
            public void onResponse(Call<List<DoctorSchedule>> call, Response<List<DoctorSchedule>> response) {
                if (response.isSuccessful() && response.body() != null) {
                    listDoctorSchedules = response.body();
                    setTableDoctorSchedules(listDoctorSchedules);
                } else {
                    try {
                        String errorMsg = response.errorBody().string();
                        JOptionPane.showMessageDialog(null, "Failed!\nError: " + errorMsg);
                    } catch (IOException e) {
                        JOptionPane.showMessageDialog(null, "Failed to read error message!");
                    }
                }
            }

            @Override
            public void onFailure(Call<List<DoctorSchedule>> call, Throwable thrwbl) {
                JOptionPane.showMessageDialog(null, "Network error: " + thrwbl.getMessage());
            }
        });
    }

    private void setTableDoctorSchedules(List<DoctorSchedule> doctorSchedules) {
        DefaultTableModel model = (DefaultTableModel) jTable_DoctorSchedul.getModel();
        model.setRowCount(0);

        for (DoctorSchedule doctorSchedule : doctorSchedules) {
            model.addRow(new Object[]{
                doctorSchedule.getWeek(),
                doctorSchedule.getMonday(),
                doctorSchedule.getTuesday(),
                doctorSchedule.getWednesday(),
                doctorSchedule.getThursday(),
                doctorSchedule.getFriday(),
                doctorSchedule.getSaturday(),
                doctorSchedule.getSunday()
            });
        }
    }

    private void setTableWeekSchedules(int inputWeek) {
        int currentYear = Calendar.getInstance().get(Calendar.YEAR);
        // Tạo calendar với năm hiện tại và set về tuần được chỉ định
        Calendar cld = Calendar.getInstance();
        cld.clear(); // Xóa toàn bộ để tránh xung đột thông tin
        cld.setFirstDayOfWeek(Calendar.MONDAY);
        cld.set(Calendar.YEAR, currentYear);
        cld.set(Calendar.WEEK_OF_YEAR, inputWeek);
        cld.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY); // Bắt đầu từ thứ 2

        // Lấy ngày đầu tuần
        SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy");
        String fromDate = formatter.format(cld.getTime());

        // Lấy ngày cuối tuần (chủ nhật)
        Calendar endOfWeek = (Calendar) cld.clone();
        endOfWeek.add(Calendar.DATE, 6); // từ thứ 2 đến chủ nhật là +6 ngày
        String toDate = formatter.format(endOfWeek.getTime());

        // Xuất kết quả
        String result = "Tuần: " + inputWeek + " từ ngày " + fromDate + " đến " + toDate;
        jLable_WeekSchedul.setText(result); // dùng trong GUI

        String token = SessionManager.getInstance().getToken();
        authService.getWeeklyCombinedResults(token, doctor.getUser_id(), DateUtils.formatDate3(fromDate))
                .enqueue(new Callback<List<CombinedResultWrapper>>() {
                    @Override
                    public void onResponse(Call<List<CombinedResultWrapper>> call, Response<List<CombinedResultWrapper>> response) {
                        if (response.isSuccessful() && response.body() != null) {
                            List<CombinedResultWrapper> data = response.body();

                            DefaultTableModel model = (DefaultTableModel) jTable_WeekSchedul.getModel();
                            model.setRowCount(0);

                            String[] timeSlots = {"7h-9h", "9h-11h", "13h-15h", "15h-17h"};

                            for (int slot = 0; slot < 4; slot++) {
                                // Tạo một hàng
                                List<String> row = new ArrayList<>();
                                row.add("Ca " + (slot + 1) + " (" + timeSlots[slot] + ")");

                                // Duyệt qua từng ngày (7 ngày trong tuần)
                                for (int day = 0; day < 7; day++) {
                                    CombinedResultWrapper dayData = data.get(day);

                                    int max = dayData.getMax_appointments().get(slot);
                                    int count = dayData.getAppointment_counts().get(slot);

                                    row.add("Đặt: " + count + "\\" + max); // VD: 10\0
                                }

                                // Thêm dòng vào bảng
                                model.addRow(row.toArray());
                            }
                        } else {
                            try {
                                JOptionPane.showMessageDialog(null, "Lỗi: " + response.errorBody().string());
                            } catch (IOException e) {
                                JOptionPane.showMessageDialog(null, "Không đọc được lỗi!");
                            }
                        }
                    }

                    @Override
                    public void onFailure(Call<List<CombinedResultWrapper>> call, Throwable t) {
                        JOptionPane.showMessageDialog(null, "Lỗi mạng: " + t.getMessage());
                    }
                });

    }

    private void loadWeeklyCombinedResults(int doctorId, String startDate) {

    }

    //appointment
    private void loadListAppointments(String appointmentDate) {
        listAppointments = new ArrayList<>();
        String token = SessionManager.getInstance().getToken();
        authService.getAppointmentsByDoctor(token, appointmentDate).enqueue(new Callback<List<Appointment>>() {
            @Override
            public void onResponse(Call<List<Appointment>> call, Response<List<Appointment>> response) {
                if (response.isSuccessful() && response.body() != null) {
                    listAppointments = response.body();
                    listAppointments.sort((a, b) -> {
                        String timeA = a.getCreated_at();
                        String timeB = b.getCreated_at();
                        return timeA.compareTo(timeB);
                    });
                    listAppointments.sort((a, b) -> {
                        String timeA = a.getShiftName();
                        String timeB = b.getShiftName();
                        return timeA.compareTo(timeB);
                    });
                    listAppointments.sort((a, b) -> {
                        String dateA = a.getAppointmentDate();
                        String dateB = b.getAppointmentDate();
                        return dateA.compareTo(dateB);
                    });

                    setTableAppointments(listAppointments);
                } else {
                    setTableAppointments(listAppointments);
                }
            }

            @Override
            public void onFailure(Call<List<Appointment>> call, Throwable thrwbl) {
                throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
            }
        });
    }

    private void setTableAppointments(List<Appointment> appointments) {
        DefaultTableModel model = (DefaultTableModel) jTable_Appointments.getModel();
        model.setRowCount(0);

        for (Appointment appointment : appointments) {
            String shift = "00";
            if (appointment.getShiftName().equals("Shift 1")) {
                shift = "7h-9h";
            } else if (appointment.getShiftName().equals("Shift 2")) {
                shift = "9h-11h";
            } else if (appointment.getShiftName().equals("Shift 3")) {
                shift = "13h-15h";
            } else if (appointment.getShiftName().equals("Shift 4")) {
                shift = "15h-17h";
            }
            model.addRow(new Object[]{
                appointment.getPatientName(),
                DateUtils.formatDate(appointment.getAppointmentDate()),
                shift, appointment.getCreated_at()
            });
        }
    }

    //Avatar
    private void uploadAvatar() {
        JFileChooser fileChooser = new JFileChooser();
        if (fileChooser.showOpenDialog(this) != JFileChooser.APPROVE_OPTION) {
            JOptionPane.showMessageDialog(this, "bi gi do");
            return;
        }

        File file = fileChooser.getSelectedFile();
        if (!file.exists() || !file.canRead()) {
            JOptionPane.showMessageDialog(this, "Không thể đọc file được chọn");
            return;
        }

        if (file.length() > 5_000_000) {
            JOptionPane.showMessageDialog(this, "File quá lớn (tối đa 5MB)");
            return;
        }

        File inputFile = fileChooser.getSelectedFile();
        File outputFile = new File("compressed.jpg"); // Ảnh sau khi giảm kích thước

        try {
            compressImage(inputFile, outputFile, 100 * 1024); // 100KB
            System.out.println("Image compressed successfully!");
        } catch (IOException e) {
            e.printStackTrace();
        }

        RequestBody requestFile = RequestBody.create(MediaType.parse("image/*"), outputFile);
        MultipartBody.Part body = MultipartBody.Part.createFormData("file", outputFile.getName(), requestFile);

        String token = SessionManager.getInstance().getToken();

        authService.uploadAvatar(body, token).enqueue(new Callback<AvatarResponse>() {
            @Override
            public void onResponse(Call<AvatarResponse> call, Response<AvatarResponse> response) {
                if (response.isSuccessful()) {
                    JOptionPane.showMessageDialog(DoctorHome.this, "Tải ảnh đại diện thành công");
                    jLabel_doctor_avatar.setText("");
                    downloadAvatar();
                } else {

                }
            }

            @Override
            public void onFailure(Call<AvatarResponse> call, Throwable t) {
                t.printStackTrace();
                JOptionPane.showMessageDialog(DoctorHome.this, "Lỗi: " + t.getMessage());
            }
        });

        // Reset selectedAvatarFile sau khi đã xử lý
    }

    public static void compressImage(File inputFile, File outputFile, long targetSize) throws IOException {
        BufferedImage image = ImageIO.read(inputFile);

        float quality = 1.0f; // Bắt đầu với chất lượng cao nhất
        while (true) {
            try (FileOutputStream fos = new FileOutputStream(outputFile); ImageOutputStream ios = ImageIO.createImageOutputStream(fos)) {

                Iterator<ImageWriter> writers = ImageIO.getImageWritersByFormatName("jpg");
                if (!writers.hasNext()) {
                    throw new IllegalStateException("No writers found");
                }
                ImageWriter writer = writers.next();
                writer.setOutput(ios);

                ImageWriteParam param = writer.getDefaultWriteParam();
                param.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);
                param.setCompressionQuality(quality);

                writer.write(null, new IIOImage(image, null, null), param);
                writer.dispose();
            }

            if (outputFile.length() <= targetSize || quality <= 0.1f) {
                break;
            }

            quality -= 0.05f; // Giảm chất lượng dần dần
        }
    }

    private void downloadAvatar() {
        String token = SessionManager.getInstance().getToken();

        authService.getAvatar(token).enqueue(new Callback<ResponseBody>() {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                if (response.isSuccessful() && response.body() != null) {
                    try (InputStream inputStream = response.body().byteStream()) {
                        byte[] bytes = inputStream.readAllBytes();

//                        ImageIcon avatarIcon = new ImageIcon(bytes);
//                        Image scaledImage = avatarIcon.getImage().getScaledInstance(100, 100, Image.SCALE_SMOOTH);
//                        jLabel_avatar.setIcon(new ImageIcon(scaledImage));
//                        jLabel_avatar.setText("");
                        ImageIcon avatarIcon = cropAndScaleImage(bytes, 100, 100);
                        if (avatarIcon != null) {
                            jLabel_doctor_avatar.setIcon(avatarIcon);
                            jLabel_doctor_avatar.setText("");
                        }

                    } catch (IOException e) {
                        jLabel_doctor_avatar.setText("Không thể tải ảnh đại diện");
                        jLabel_doctor_avatar.setIcon(null);
                    }
                } else {
                    jLabel_doctor_avatar.setText("Không thể tải ảnh đại diện");
                    jLabel_doctor_avatar.setIcon(null);
                }
            }

            @Override
            public void onFailure(Call<ResponseBody> call, Throwable t) {
                JOptionPane.showMessageDialog(DoctorHome.this, "Lỗi: " + t.getMessage());
            }
        });
    }

    public ImageIcon cropAndScaleImage(byte[] imageBytes, int targetWidth, int targetHeight) {
        try {
            BufferedImage originalImage = ImageIO.read(new ByteArrayInputStream(imageBytes));

            int originalWidth = originalImage.getWidth();
            int originalHeight = originalImage.getHeight();

            float originalRatio = (float) originalWidth / originalHeight;
            float targetRatio = (float) targetWidth / targetHeight;

            int cropWidth = originalWidth;
            int cropHeight = originalHeight;

            // Cắt ảnh theo chiều phù hợp để giữ đúng tỉ lệ
            if (originalRatio > targetRatio) {
                // Cắt chiều rộng
                cropWidth = (int) (originalHeight * targetRatio);
            } else {
                // Cắt chiều cao
                cropHeight = (int) (originalWidth / targetRatio);
            }

            // Tính tọa độ bắt đầu để crop giữa ảnh
            int x = (originalWidth - cropWidth) / 2;
            int y = (originalHeight - cropHeight) / 2;

            // Crop ảnh
            BufferedImage croppedImage = originalImage.getSubimage(x, y, cropWidth, cropHeight);

            // Scale ảnh đã crop
            Image scaledImage = croppedImage.getScaledInstance(targetWidth, targetHeight, Image.SCALE_SMOOTH);

            return new ImageIcon(scaledImage);

        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }

    private void date() {
        SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy");
        String formattedDate = formatter.format(new Date());

        Calendar calendar2 = Calendar.getInstance();
        int weekOfYear = calendar2.get(Calendar.WEEK_OF_YEAR);

        jLabel_ngayhientai.setText("Ngày hôm nay: " + formattedDate + " - Tuần: " + weekOfYear);
    }

    //Department
    private void loadListDepartments() {
        String token = SessionManager.getInstance().getToken();

        listDepartments = new ArrayList<>();
        authService.getDepartments(token).enqueue(new Callback<List<Department>>() {
            @Override
            public void onResponse(Call<List<Department>> call, Response<List<Department>> response) {
                if (response.isSuccessful() && response.body() != null) {
                    setTableDepartment(response.body());
                    listDepartments = response.body();

                    for (Department d : response.body()) {
                        if (d.getDepartment_id() == doctor.getDepartment_id()) {
                            setDeparment_toUI(d);
                            break;
                        }
                    }
                } else {
                    try {
                        String errorMsg = response.errorBody().string();
                        JOptionPane.showMessageDialog(null, "Failed to register!\nError: " + errorMsg);
                    } catch (IOException e) {
                        JOptionPane.showMessageDialog(null, "Failed to read error message!");
                    }
                }
            }

            @Override
            public void onFailure(Call<List<Department>> call, Throwable thrwbl) {
                JOptionPane.showMessageDialog(null, "Network error: " + thrwbl.getMessage());
            }
        });
    }

    private void setTableDepartment(List<Department> departments) {
        DefaultTableModel model = (DefaultTableModel) jTable_departments.getModel();
        model.setRowCount(0);

        for (Department dept : departments) {
            model.addRow(new Object[]{dept.getId(), dept.getName(), dept.getDescription()});
        }

    }

    private void setDeparment_toUI(Department department) {
        jTextField_department_name.setText(department.getName());
        jTextArea_department_description.setText(department.getDescription());
        jTextArea_department_description.setLineWrap(true); // Tự động xuống dòng
        jTextArea_department_description.setWrapStyleWord(true); // Xuống dòng theo từ
        downloadAvatarDepartment(department.getId() + "");
    }

    private void downloadAvatarDepartment(String department_id) {
        String token = SessionManager.getInstance().getToken();

        authService.adminGetAvatarDepartment(token, department_id).enqueue(new Callback<ResponseBody>() {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                if (response.isSuccessful() && response.body() != null) {
                    try (InputStream inputStream = response.body().byteStream()) {
                        byte[] bytes = inputStream.readAllBytes();

//                        ImageIcon avatarIcon = new ImageIcon(bytes);
//                        Image scaledImage = avatarIcon.getImage().getScaledInstance(482, 172, Image.SCALE_SMOOTH);
//                        jLabel_avatar_department.setIcon(new ImageIcon(scaledImage));
//                        jLabel_avatar_department.setText("");
                        ImageIcon avatarIcon = cropAndScaleImage(bytes, 668, 234);
                        if (avatarIcon != null) {
                            jLabel_avatar_department.setIcon(avatarIcon);
                            jLabel_avatar_department.setText("");
                        }

                    } catch (IOException e) {
                        jLabel_avatar_department.setText("Không thể tải ảnh đại diện");
                        jLabel_avatar_department.setIcon(null);

                    }
                } else {
                    jLabel_avatar_department.setText("Không thể tải ảnh đại diện");
                    jLabel_avatar_department.setIcon(null);
                    jLabel_avatar_department.setText("Không thể tải ảnh đại diện");
                }
            }

            @Override
            public void onFailure(Call<ResponseBody> call, Throwable t) {
                JOptionPane.showMessageDialog(DoctorHome.this, "Lỗi: " + t.getMessage());
            }
        });
    }

    //BUTTON
    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        new Login().setVisible(true);
        SessionManager.getInstance().clearSession(doctor.getUser_id());

        DoctorHome.this.dispose();
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        jTabbedPane.setSelectedIndex(0);
        // Lấy ngày hiện tại
        calendar = Calendar.getInstance();

        // Lấy đối tượng Date
        Date date = calendar.getTime();

        // Định dạng thành chuỗi yyyy-MM-dd
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String formattedDate = sdf.format(date);

        jLabel_date_appointment.setText("Lịch khám hôm nay: " + DateUtils.formatDate2(formattedDate));

        loadListAppointments(formattedDate);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        jTabbedPane.setSelectedIndex(1);

        Calendar calendar2 = Calendar.getInstance();
        weekSchedules = calendar2.get(Calendar.WEEK_OF_YEAR);

        setTableWeekSchedules(weekSchedules);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        jTabbedPane.setSelectedIndex(2);
        setDoctor_toUI(doctor);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jLabel_doctor_avatarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel_doctor_avatarMouseClicked
        uploadAvatar();
    }//GEN-LAST:event_jLabel_doctor_avatarMouseClicked

    private void jTextField_doctor_emaiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_doctor_emaiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_doctor_emaiActionPerformed

    private void jPasswordField_doctor_passActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPasswordField_doctor_passActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jPasswordField_doctor_passActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        updateDoctor();
    }//GEN-LAST:event_jButton13ActionPerformed

    //button
    private void jTextField_doctor_phoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_doctor_phoneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_doctor_phoneActionPerformed

    private void jTable_AppointmentsMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_AppointmentsMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable_AppointmentsMouseEntered

    private void jTable_AppointmentsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_AppointmentsMouseClicked
        int row = jTable_Appointments.getSelectedRow();

        if (row != -1) {
            Appointment a = listAppointments.get(row);

            PatientUpdateListener listener = new PatientUpdateListener() {
                @Override
                public void onPatientUpdated(Appointment appointment) {
                    System.out.println("Bệnh nhân đã được cập nhật: " + appointment.getAppointment_id());
                    // Ví dụ: làm mới danh sách bệnh nhân
                    listAppointments.remove(appointment);
                    setTableAppointments(listAppointments);
                }
            };

            PatientJPanel panel = new PatientJPanel(this.doctor, a, listener);

            JFrame frame = new JFrame("Thông tin bệnh nhân");
            frame.setContentPane(panel);
            frame.pack();
            frame.setLocationRelativeTo(null);
            frame.setVisible(true);

        }
    }//GEN-LAST:event_jTable_AppointmentsMouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        jTabbedPane.setSelectedIndex(3);

        loadListDepartments();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        // Lấy ngày hiện tại
        calendar = Calendar.getInstance();

        // Lấy đối tượng Date
        Date date = calendar.getTime();

        // Định dạng thành chuỗi yyyy-MM-dd
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String formattedDate = sdf.format(date);

        jLabel_date_appointment.setText("Tất cả lịch khám từ hôm nay: " + DateUtils.formatDate2(formattedDate));
        loadListAppointments("");
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton18ActionPerformed
        // Lấy ngày hiện tại
        calendar = Calendar.getInstance();

        // Lấy đối tượng Date
        Date date = calendar.getTime();

        // Định dạng thành chuỗi yyyy-MM-dd
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String formattedDate = sdf.format(date);

        jLabel_date_appointment.setText("Lịch khám hôm nay: " + DateUtils.formatDate2(formattedDate));

        loadListAppointments(formattedDate);
    }//GEN-LAST:event_jButton18ActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        // Trừ 1 ngày
        calendar.add(Calendar.DATE, -1);  // +1 nếu muốn cộng ngày

        // Lấy đối tượng Date
        Date date = calendar.getTime();

        // Định dạng thành chuỗi yyyy-MM-dd
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String formattedDate = sdf.format(date);

        jLabel_date_appointment.setText("Lịch khám ngày: " + DateUtils.formatDate2(formattedDate));
        loadListAppointments(formattedDate);
    }//GEN-LAST:event_jButton16ActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        calendar.add(Calendar.DATE, 1);  // +1 nếu muốn cộng ngày

        // Lấy đối tượng Date
        Date date = calendar.getTime();

        // Định dạng thành chuỗi yyyy-MM-dd
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String formattedDate = sdf.format(date);

        jLabel_date_appointment.setText("Lịch khám ngày: " + DateUtils.formatDate2(formattedDate));

        loadListAppointments(formattedDate);
    }//GEN-LAST:event_jButton17ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        loadListDepartments();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jTabbedPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPaneMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTabbedPaneMouseClicked

    private void jTable_departmentsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_departmentsMouseClicked
        int row = jTable_departments.getSelectedRow();

        if (row != -1) { // Kiểm tra nếu có dòng nào đó được chọn
            Department department = listDepartments.get(row);
            setDeparment_toUI(department);
        }
    }//GEN-LAST:event_jTable_departmentsMouseClicked

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        weekSchedules--;
        setTableWeekSchedules(weekSchedules);
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        weekSchedules++;
        setTableWeekSchedules(weekSchedules);
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jTable_DoctorSchedulMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_DoctorSchedulMouseClicked
        int row = jTable_DoctorSchedul.getSelectedRow();

        if (row != -1) {
            int week = (int) jTable_DoctorSchedul.getValueAt(row, 0);
            setTableWeekSchedules(week);
        }
    }//GEN-LAST:event_jTable_DoctorSchedulMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DoctorHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DoctorHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DoctorHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DoctorHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DoctorHome(123).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel_avatar_department;
    private javax.swing.JLabel jLabel_date_appointment;
    private javax.swing.JLabel jLabel_doctor_avatar;
    private javax.swing.JLabel jLabel_doctor_email;
    private javax.swing.JLabel jLabel_doctor_loi;
    private javax.swing.JLabel jLabel_doctor_name;
    private javax.swing.JLabel jLabel_id_user;
    private javax.swing.JLabel jLabel_ngayhientai;
    private javax.swing.JLabel jLable_WeekSchedul;
    private javax.swing.JLabel jLable_doctor_avatar_url;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPasswordField jPasswordField_doctor_pass;
    private javax.swing.JRadioButton jRadioButton_doctor_nam;
    private javax.swing.JRadioButton jRadioButton_doctor_nu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JTable jTable_Appointments;
    private javax.swing.JTable jTable_DoctorSchedul;
    private javax.swing.JTable jTable_WeekSchedul;
    private javax.swing.JTable jTable_departments;
    private javax.swing.JTextArea jTextArea_department_description;
    private javax.swing.JTextArea jTextArea_doctor_description;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel jTextField_department_name;
    private javax.swing.JLabel jTextField_department_name1;
    private javax.swing.JTextField jTextField_doctor_address;
    private javax.swing.JTextField jTextField_doctor_brithdate;
    private javax.swing.JTextField jTextField_doctor_department_id;
    private javax.swing.JTextField jTextField_doctor_emai;
    private javax.swing.JTextField jTextField_doctor_name;
    private javax.swing.JTextField jTextField_doctor_phone;
    // End of variables declaration//GEN-END:variables
}
