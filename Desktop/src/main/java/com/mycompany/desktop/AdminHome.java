/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.desktop;

import com.mycompany.desktop.JPanel.DoctorJPanel;
import com.mycompany.desktop.API.APIClient;
import com.mycompany.desktop.API.AuthService;
import com.mycompany.desktop.models.Admin;
import com.mycompany.desktop.models.*;
import com.mycompany.desktop.utils.SessionManager;
import com.mycompany.desktop.utils.ValidationUtils;
import java.awt.Dimension;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Date;

import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

import com.google.gson.Gson;
import com.mycompany.desktop.JPanel.RegisterDoctorJPanel;
import com.mycompany.desktop.utils.DateUtils;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.time.LocalDate;
import java.util.Iterator;
import javax.imageio.IIOImage;
import javax.imageio.ImageIO;
import javax.imageio.ImageWriteParam;
import javax.imageio.ImageWriter;
import javax.imageio.stream.ImageOutputStream;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.RequestBody;
import okhttp3.ResponseBody;
import java.util.Calendar;
import javax.swing.JFrame;

/**
 *
 * @author admin
 */
public class AdminHome extends javax.swing.JFrame {

    private AuthService authService;
    private List<Department> listDepartments;
    private List<Doctor> listDoctors;
    private List<DoctorSchedule> listDoctorSchedules;
    private List<Appointment> listAppointments;
    private Admin admin;
    private int user_id;

    /**
     * Creates new form AdminHome
     */
    public AdminHome(int user_id) {
        initComponents();

        this.user_id = user_id;
        SessionManager.getInstance().setCurrentUserId(user_id);
        authService = APIClient.getAuthService();

        loadAdminProfile();
        loadListDepartments();

        date();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jLabel_avatar_department = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextField_department_name = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea_department_description = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        jLabel155 = new javax.swing.JLabel();
        jTextField_department_anhNen = new javax.swing.JTextField();
        jButton_avatar_dep = new javax.swing.JButton();
        jButton_reset_depa = new javax.swing.JButton();
        jButton_delete_dep = new javax.swing.JButton();
        jButton_update_dep = new javax.swing.JButton();
        jButton_add_dep = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable_doctor = new javax.swing.JTable();
        jLabel_dsbs_khoa = new javax.swing.JLabel();
        jButton_themBacSi = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jPanel_admin = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jLabel_admin_name1 = new javax.swing.JLabel();
        jLabel_admin_email1 = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jLabel_admin_name = new javax.swing.JLabel();
        jLabel_admin_email = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        jLabel_ngayhientai = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_departments = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Trang ADMIN");
        setResizable(false);

        jPanel5.setToolTipText("");

        jLabel_avatar_department.setText("jLabel15");
        jLabel_avatar_department.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel_avatar_departmentMouseClicked(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel6.setText("Tên Khoa:");

        jTextField_department_name.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N

        jTextArea_department_description.setColumns(20);
        jTextArea_department_description.setRows(3);
        jScrollPane5.setViewportView(jTextArea_department_description);

        jLabel7.setText("Mô tả:");

        jLabel155.setText("Ảnh nền:");

        jButton_avatar_dep.setText("Tải Ảnh");
        jButton_avatar_dep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_avatar_depActionPerformed(evt);
            }
        });

        jButton_reset_depa.setText("Làm mới");
        jButton_reset_depa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_reset_depaActionPerformed(evt);
            }
        });

        jButton_delete_dep.setText("Xóa khoa");
        jButton_delete_dep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_delete_depActionPerformed(evt);
            }
        });

        jButton_update_dep.setText("Cập nhật");
        jButton_update_dep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_update_depActionPerformed(evt);
            }
        });

        jButton_add_dep.setText("Thêm");
        jButton_add_dep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_add_depActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jButton_add_dep)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton_update_dep)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton_delete_dep)
                        .addGap(18, 18, 18)
                        .addComponent(jButton_reset_depa))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel155))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel_avatar_department, javax.swing.GroupLayout.PREFERRED_SIZE, 431, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel9Layout.createSequentialGroup()
                                    .addComponent(jTextField_department_anhNen, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jButton_avatar_dep))
                                .addComponent(jScrollPane5)
                                .addComponent(jTextField_department_name)))))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel_avatar_department, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTextField_department_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel155)
                    .addComponent(jTextField_department_anhNen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_avatar_dep))
                .addGap(18, 18, 18)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_add_dep)
                    .addComponent(jButton_update_dep)
                    .addComponent(jButton_delete_dep)
                    .addComponent(jButton_reset_depa))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Thông tin khoa", jPanel5);

        jTable_doctor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Tên", "Email", "Số điện thoại", "Ngày sinh"
            }
        ));
        jTable_doctor.setRowHeight(30);
        jTable_doctor.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable_doctor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_doctorMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTable_doctor);
        if (jTable_doctor.getColumnModel().getColumnCount() > 0) {
            jTable_doctor.getColumnModel().getColumn(3).setMinWidth(0);
            jTable_doctor.getColumnModel().getColumn(3).setPreferredWidth(0);
            jTable_doctor.getColumnModel().getColumn(3).setMaxWidth(0);
        }

        jLabel_dsbs_khoa.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel_dsbs_khoa.setText("Danh sách bác sĩ khoa:");

        jButton_themBacSi.setText("Thêm bác sĩ");
        jButton_themBacSi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_themBacSiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel_dsbs_khoa, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_themBacSi)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 521, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel_dsbs_khoa)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton_themBacSi)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(250, 250, 250))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 25, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 5, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Quản Lý Bác Sĩ", jPanel3);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Trang ADMIN");

        jButton6.setText("Đổi mật khẩu");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel_admin_name1.setText("Tên:");

        jLabel_admin_email1.setText("Gmail:");

        jButton8.setText("Đăng xuất");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel_adminLayout = new javax.swing.GroupLayout(jPanel_admin);
        jPanel_admin.setLayout(jPanel_adminLayout);
        jPanel_adminLayout.setHorizontalGroup(
            jPanel_adminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_adminLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel_adminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel_admin_email1)
                    .addComponent(jLabel_admin_name1)
                    .addGroup(jPanel_adminLayout.createSequentialGroup()
                        .addComponent(jButton6)
                        .addGap(18, 18, 18)
                        .addComponent(jButton8))
                    .addComponent(jLabel1))
                .addContainerGap(87, Short.MAX_VALUE))
        );
        jPanel_adminLayout.setVerticalGroup(
            jPanel_adminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_adminLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel_admin_name1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel_admin_email1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel_adminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton6)
                    .addComponent(jButton8))
                .addGap(17, 17, 17))
        );

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel_admin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(268, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(jPanel_admin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 295, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Thông tin Admin", jPanel8);

        jPanel4.setBackground(new java.awt.Color(0, 102, 204));

        jLabel16.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("TRANG ADMIN QUẢN LÝ");

        jLabel_admin_name.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_admin_name.setText("Tên:");

        jLabel_admin_email.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_admin_email.setText("Gmail:");

        jButton7.setText("Đăng xuất");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jLabel_ngayhientai.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_ngayhientai.setText("jLabel2");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel_ngayhientai)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 361, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel_admin_name)
                    .addComponent(jLabel_admin_email))
                .addGap(18, 18, 18)
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton7)
                            .addComponent(jLabel16)
                            .addComponent(jLabel_ngayhientai)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel_admin_name)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel_admin_email)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel15.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel15.setText("Chức năng");

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jTable_departments.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jTable_departments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "id", "Tên Khoa"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable_departments.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTable_departments.setName(""); // NOI18N
        jTable_departments.setRowHeight(40);
        jTable_departments.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable_departments.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable_departments.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_departmentsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable_departments);
        if (jTable_departments.getColumnModel().getColumnCount() > 0) {
            jTable_departments.getColumnModel().getColumn(0).setMinWidth(35);
            jTable_departments.getColumnModel().getColumn(0).setPreferredWidth(35);
            jTable_departments.getColumnModel().getColumn(0).setMaxWidth(35);
        }

        jButton1.setText("Thêm khoa");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Thoát");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 575, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 504, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButton1)
                                    .addComponent(jButton2))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //button
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        new Login().setVisible(true);
        SessionManager.getInstance().clearSession(admin.getUser_id());

        AdminHome.this.dispose();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed

    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton_themBacSiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_themBacSiActionPerformed
        int row = jTable_departments.getSelectedRow();

        if (row != -1) {
            int id_department = (int) jTable_departments.getValueAt(row, 0);
            RegisterDoctorJPanel panel = new RegisterDoctorJPanel(id_department);
            JFrame frame = new JFrame("Thêm bác sĩ");
            frame.setContentPane(panel);
            frame.pack(); // tự động điều chỉnh kích thước
            frame.setLocationRelativeTo(null); // giữa màn hình
            frame.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(null, "Chưa chọn khoa");

        }
    }//GEN-LAST:event_jButton_themBacSiActionPerformed

    private void jTable_doctorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_doctorMouseClicked
        int row = jTable_doctor.getSelectedRow();

        if (row != -1) { // Kiểm tra nếu có dòng nào đó được chọn
            Doctor doctorResponse = listDoctors.get(row);

            DoctorJPanel panel = new DoctorJPanel(doctorResponse);

            JFrame frame = new JFrame("Thông tin bác sĩ");
            frame.setContentPane(panel);
            frame.pack(); // tự động điều chỉnh kích thước
            frame.setLocationRelativeTo(null); // giữa màn hình
            frame.setVisible(true);
        }

    }//GEN-LAST:event_jTable_doctorMouseClicked

    private void jTable_departmentsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_departmentsMouseClicked
        int row = jTable_departments.getSelectedRow();

        if (row != -1) { // Kiểm tra nếu có dòng nào đó được chọn
            Department department = listDepartments.get(row);
            setDeparment_toUI(department);
        }
    }//GEN-LAST:event_jTable_departmentsMouseClicked

    private void jButton_add_depActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_add_depActionPerformed
        create_department();
    }//GEN-LAST:event_jButton_add_depActionPerformed

    private void jButton_delete_depActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_delete_depActionPerformed
        int result = JOptionPane.showConfirmDialog(
                null,
                "Bạn có chắc chắn muốn xóa?",
                "Xác nhận xóa",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE
        );

        if (result == JOptionPane.YES_OPTION) {
            int row = jTable_departments.getSelectedRow();

            if (row != -1) {
                deleteDepartment((int) jTable_departments.getValueAt(row, 0));
            }
        } else {
            System.out.println("Đã hủy xóa");
        }
    }//GEN-LAST:event_jButton_delete_depActionPerformed

    private void jButton_reset_depaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_reset_depaActionPerformed
        jTextField_department_name.setText("");
        jTextArea_department_description.setText("");
        clearDepartmentUI();

        loadListDepartments();
    }//GEN-LAST:event_jButton_reset_depaActionPerformed

    private void jButton_avatar_depActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_avatar_depActionPerformed
        int row = jTable_departments.getSelectedRow();

        uploadAvatarDepartment(listDepartments.get(row).getId() + "");
    }//GEN-LAST:event_jButton_avatar_depActionPerformed


    private void jLabel_avatar_departmentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel_avatar_departmentMouseClicked
        int row = jTable_departments.getSelectedRow();
        uploadAvatarDepartment(listDepartments.get(row).getId() + "");
    }//GEN-LAST:event_jLabel_avatar_departmentMouseClicked

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        SessionManager.getInstance().clearSession(admin.getUser_id());

        new Login().setVisible(true);
        AdminHome.this.dispose();
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        jTabbedPane1.setSelectedIndex(0);
        clearDepartmentUI();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        SessionManager.getInstance().clearSession(admin.getUser_id());

        new Login().setVisible(true);
        AdminHome.this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed


    private void jButton_update_depActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_update_depActionPerformed
        int row = jTable_departments.getSelectedRow();

        if (row != -1) {
            Department department = getDepartmentFromUI();
            department.setId((int) jTable_departments.getValueAt(row, 0));
            updateDepartment(department);
        }
    }//GEN-LAST:event_jButton_update_depActionPerformed

    //admin
    private void loadAdminProfile() {
        String token = SessionManager.getInstance().getToken();
        authService.getAdminProfile(token).enqueue(new Callback<Admin>() {
            @Override
            public void onResponse(Call<Admin> call, Response<Admin> response) {
                if (response.isSuccessful() && response.body() != null) {
                    admin = response.body();
                    jLabel_admin_name.setText(response.body().getFull_name());
                    jLabel_admin_email.setText(response.body().getEmail());
                    jLabel_admin_name1.setText(response.body().getFull_name());
                    jLabel_admin_email1.setText(response.body().getEmail());

                    SessionManager.getInstance().setCurrentUserId(response.body().getUser_id());
                } else {
                    // Handle error
                    if (response.code() == 401) {
                        // Token expired or invalid
                        JOptionPane.showMessageDialog(null, "Session expired. Please login again.");
                        new Login().setVisible(true);
                        AdminHome.this.dispose();

                    } else {
                        try {
                            String errorMsg = response.errorBody().string();
                            JOptionPane.showMessageDialog(null, "Failed to register!\nError: " + errorMsg);
                        } catch (IOException e) {
                            JOptionPane.showMessageDialog(null, "Failed to read error message!");
                        }
                    }
                }

            }

            @Override
            public void onFailure(Call<Admin> call, Throwable thrwbl) {
                JOptionPane.showMessageDialog(null, "Network error");
            }
        });
    }

    //load list
    private void loadListDepartments() {
        String token = SessionManager.getInstance().getToken();
        listDepartments = new ArrayList<>();

        authService.getDepartments(token).enqueue(new Callback<List<Department>>() {
            @Override
            public void onResponse(Call<List<Department>> call, Response<List<Department>> response) {
                if (response.isSuccessful() && response.body() != null) {
                    listDepartments = response.body();
                    setTableDepartment(listDepartments);
                    setDeparment_toUI(listDepartments.get(0));
                } else {
                    try {
                        String errorMsg = response.errorBody().string();
                        JOptionPane.showMessageDialog(null, "Failed to register!\nError: " + errorMsg);
                    } catch (IOException e) {
                        JOptionPane.showMessageDialog(null, "Failed to read error message!");
                    }
                }
            }

            @Override
            public void onFailure(Call<List<Department>> call, Throwable thrwbl) {
                JOptionPane.showMessageDialog(null, "Network error: " + thrwbl.getMessage());
            }
        });
    }

    //doctor
    private void loadListDoctors(int department_id) {
        String token = SessionManager.getInstance().getToken();
        listDoctors = new ArrayList<>();

        authService.getListDoctors(token, department_id).enqueue(new Callback<List<Doctor>>() {
            @Override
            public void onResponse(Call<List<Doctor>> call, Response<List<Doctor>> response) {
                if (response.isSuccessful() && response.body() != null) {
                    listDoctors = response.body();
                    setTableDoctor(listDoctors);
                } else {
                    try {
                        String errorMsg = response.errorBody().string();
                        JOptionPane.showMessageDialog(null, "Failed to register!\nError: " + errorMsg);
                    } catch (IOException e) {
                        JOptionPane.showMessageDialog(null, "Failed to read error message!");
                    }
                }
            }

            @Override
            public void onFailure(Call<List<Doctor>> call, Throwable thrwbl) {
                JOptionPane.showMessageDialog(null, "Network error: " + thrwbl.getMessage());
            }
        });

    }

    private void setTableDoctor(List<Doctor> doctors) {
        DefaultTableModel model = (DefaultTableModel) jTable_doctor.getModel();
        model.setRowCount(0);

        for (Doctor doctor : doctors) {
            model.addRow(new Object[]{doctor.getFull_name(), doctor.getEmail(), doctor.getPhone(), doctor.getDate_of_birth()});
        }
    }

    //Department
    private void setTableDepartment(List<Department> departments) {
        DefaultTableModel model = (DefaultTableModel) jTable_departments.getModel();
        model.setRowCount(0);

        for (Department dept : departments) {
            model.addRow(new Object[]{dept.getId(), dept.getName(), dept.getDescription()});
        }

    }

    private void create_department() {
        Department department = getDepartmentFromUI();

        if (department == null) {
            JOptionPane.showMessageDialog(null, "thieu thong tin");
            return;
        }

        String token = SessionManager.getInstance().getToken();

        authService.createDepartment(token, department).enqueue(new Callback<Department>() {
            @Override
            public void onResponse(Call<Department> call, Response<Department> response) {
                if (response.isSuccessful() && response.body() != null) {
                    //thu thoi nhhng chac loi
                    JOptionPane.showMessageDialog(null, "Registration successful!" + response.body().getDepartment_id());
                    clearDepartmentUI();
                    loadListDepartments();

                } else {
                    try {
                        String errorMsg = response.errorBody().string();
                        JOptionPane.showMessageDialog(null, "Failed to register!\nError: " + errorMsg);
                    } catch (IOException e) {
                        JOptionPane.showMessageDialog(null, "Failed to read error message!");
                    }
                }
            }

            @Override
            public void onFailure(Call<Department> call, Throwable thrwbl) {
                JOptionPane.showMessageDialog(null, "Network error: " + thrwbl.getMessage());

            }
        });
    }

    private void updateDepartment(Department department) {
        String token = SessionManager.getInstance().getToken();

        authService.updateDepartments(token, department, department.getId()).enqueue(new Callback<Department>() {
            @Override
            public void onResponse(Call<Department> call, Response<Department> response) {
                if (response.isSuccessful() && response.body() != null) {
                    //thu thoi nhhng chac loi
                    JOptionPane.showMessageDialog(null, "Update successful!" + response.body().getDepartment_id());

                    for (int i = 0; i < listDepartments.size(); i++) {
                        if (listDepartments.get(i).getId() == department.getId()) {
                            listDepartments.set(i, department); // Cập nhật phần tử
                            break;
                        }
                    }
                    setTableDepartment(listDepartments);

                } else {
                    try {
                        String errorMsg = response.errorBody().string();
                        JOptionPane.showMessageDialog(null, "Failed to Update!\nError: " + errorMsg);
                    } catch (IOException e) {
                        JOptionPane.showMessageDialog(null, "Failed to read error message!");
                    }
                }
            }

            @Override
            public void onFailure(Call<Department> call, Throwable thrwbl) {
                JOptionPane.showMessageDialog(null, "Network error: " + thrwbl.getMessage());
            }
        });
    }

    private void deleteDepartment(int department_id) {
        String token = SessionManager.getInstance().getToken();

        authService.deleteDepartments(token, department_id).enqueue(new Callback<Department>() {
            @Override
            public void onResponse(Call<Department> call, Response<Department> response) {
                if (response.isSuccessful() && response.body() != null) {
                    //thu thoi nhhng chac loi
                    JOptionPane.showMessageDialog(null, "Delete successful!" + response.body().getDepartment_id());
                    clearDepartmentUI();

                    for (int i = 0; i < listDepartments.size(); i++) {
                        if (listDepartments.get(i).getId() == department_id) {
                            listDepartments.remove(i);
                            break;
                        }
                    }

                } else {
                    try {
                        String errorMsg = response.errorBody().string();
                        JOptionPane.showMessageDialog(null, "Failed to Delete!\nError: " + errorMsg);
                    } catch (IOException e) {
                        JOptionPane.showMessageDialog(null, "Failed to read error message!");
                    }
                }
            }

            @Override
            public void onFailure(Call<Department> call, Throwable thrwbl) {
                JOptionPane.showMessageDialog(null, "Network error: " + thrwbl.getMessage());
            }
        });
    }

    private Department getDepartmentFromUI() {
        Department department = new Department();
        if (jTextField_department_name.getText().isEmpty()) {
            jTextField_department_name.requestFocus();
            return null;
        }
        if (jTextArea_department_description.getText().isEmpty()) {
            jTextArea_department_description.requestFocus();
            return null;
        }
        if (jTextField_department_name.getText().isEmpty()) {
            jTextField_department_name.requestFocus();
            return null;
        }
        department.setName(jTextField_department_name.getText().trim());

        department.setDescription(jTextArea_department_description.getText().trim());

        department.setAvatar_url(jTextField_department_anhNen.getText().trim());

        return department;
    }

    private void setDeparment_toUI(Department department) {
        jTextField_department_name.setText(department.getName());
        jTextArea_department_description.setText(department.getDescription());
        jTextArea_department_description.setLineWrap(true); // Tự động xuống dòng
        jTextArea_department_description.setWrapStyleWord(true); // Xuống dòng theo từ
        jTextField_department_anhNen.setText(department.getAvatar_url());
        loadListDoctors(department.getId());;

        downloadAvatarDepartment(department.getId() + "");
        jLabel_dsbs_khoa.setText("Danh sách bác sĩ khoa: " + department.getName());
    }

    private void clearDepartmentUI() {
        jTextField_department_name.setText("");
        jTextArea_department_description.setText("");
        jTextField_department_anhNen.setText("");
        jLabel_dsbs_khoa.setText("Danh sách bác sĩ khoa: ");

        jLabel_avatar_department.setIcon(null);
        jLabel_avatar_department.setText("");
    }

    private void uploadAvatarDepartment(String department_id) {
        JFileChooser fileChooser = new JFileChooser();
        if (fileChooser.showOpenDialog(this) != JFileChooser.APPROVE_OPTION) {
            return;
        }

        File file = fileChooser.getSelectedFile();
        if (!file.exists() || !file.canRead()) {
            JOptionPane.showMessageDialog(this, "Không thể đọc file được chọn");
            return;
        }

        if (file.length() > 5_000_000) {
            JOptionPane.showMessageDialog(this, "File quá lớn (tối đa 5MB)");
            return;
        }

        File inputFile = fileChooser.getSelectedFile();
        File outputFile = new File("compressed.jpg"); // Ảnh sau khi giảm kích thước

        try {
            compressImage(inputFile, outputFile, 100 * 1024); // 100KB
            System.out.println("Image compressed successfully!");
        } catch (IOException e) {
            e.printStackTrace();
        }

        RequestBody requestFile = RequestBody.create(MediaType.parse("image/*"), outputFile);
        MultipartBody.Part body = MultipartBody.Part.createFormData("file", outputFile.getName(), requestFile);

        String token = SessionManager.getInstance().getToken();

        authService.adminSetAvatarDepartment(body, token, department_id).enqueue(new Callback<AvatarResponse>() {
            @Override
            public void onResponse(Call<AvatarResponse> call, Response<AvatarResponse> response) {
                if (response.isSuccessful()) {
                    downloadAvatarDepartment(department_id); // tự cập nhật lại avatar hiển thị
                    JOptionPane.showMessageDialog(AdminHome.this, "Tải ảnh đại diện thành công");
                } else {
                    showError(response);
                }
            }

            @Override
            public void onFailure(Call<AvatarResponse> call, Throwable t) {
                t.printStackTrace();
                JOptionPane.showMessageDialog(AdminHome.this, "Lỗi: " + t.getMessage());
            }
        });
    }

    private void downloadAvatarDepartment(String department_id) {
        String token = SessionManager.getInstance().getToken();

        authService.adminGetAvatarDepartment(token, department_id).enqueue(new Callback<ResponseBody>() {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                if (response.isSuccessful() && response.body() != null) {
                    try (InputStream inputStream = response.body().byteStream()) {
                        byte[] bytes = inputStream.readAllBytes();

//                        ImageIcon avatarIcon = new ImageIcon(bytes);
//                        Image scaledImage = avatarIcon.getImage().getScaledInstance(482, 172, Image.SCALE_SMOOTH);
//                        jLabel_avatar_department.setIcon(new ImageIcon(scaledImage));
//                        jLabel_avatar_department.setText("");
                        ImageIcon avatarIcon = cropAndScaleImage(bytes, 423, 180);
                        if (avatarIcon != null) {
                            jLabel_avatar_department.setIcon(avatarIcon);
                            jLabel_avatar_department.setText("");
                        }

                    } catch (IOException e) {
                        jLabel_avatar_department.setText("Không thể tải ảnh đại diện");
                        jLabel_avatar_department.setIcon(null);

                    }
                } else {
                    jLabel_avatar_department.setText("Không thể tải ảnh đại diện");
                    jLabel_avatar_department.setIcon(null);
                    jLabel_avatar_department.setText("Không thể tải ảnh đại diện");
                }
            }

            @Override
            public void onFailure(Call<ResponseBody> call, Throwable t) {
                JOptionPane.showMessageDialog(AdminHome.this, "Lỗi: " + t.getMessage());
            }
        });
    }

    //Image, other
    public static void compressImage(File inputFile, File outputFile, long targetSize) throws IOException {
        BufferedImage image = ImageIO.read(inputFile);

        float quality = 1.0f; // Bắt đầu với chất lượng cao nhất
        while (true) {
            try (FileOutputStream fos = new FileOutputStream(outputFile); ImageOutputStream ios = ImageIO.createImageOutputStream(fos)) {

                Iterator<ImageWriter> writers = ImageIO.getImageWritersByFormatName("jpg");
                if (!writers.hasNext()) {
                    throw new IllegalStateException("No writers found");
                }
                ImageWriter writer = writers.next();
                writer.setOutput(ios);

                ImageWriteParam param = writer.getDefaultWriteParam();
                param.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);
                param.setCompressionQuality(quality);

                writer.write(null, new IIOImage(image, null, null), param);
                writer.dispose();
            }

            if (outputFile.length() <= targetSize || quality <= 0.1f) {
                break;
            }

            quality -= 0.05f; // Giảm chất lượng dần dần
        }
    }

    public ImageIcon cropAndScaleImage(byte[] imageBytes, int targetWidth, int targetHeight) {
        try {
            BufferedImage originalImage = ImageIO.read(new ByteArrayInputStream(imageBytes));

            int originalWidth = originalImage.getWidth();
            int originalHeight = originalImage.getHeight();

            float originalRatio = (float) originalWidth / originalHeight;
            float targetRatio = (float) targetWidth / targetHeight;

            int cropWidth = originalWidth;
            int cropHeight = originalHeight;

            // Cắt ảnh theo chiều phù hợp để giữ đúng tỉ lệ
            if (originalRatio > targetRatio) {
                // Cắt chiều rộng
                cropWidth = (int) (originalHeight * targetRatio);
            } else {
                // Cắt chiều cao
                cropHeight = (int) (originalWidth / targetRatio);
            }

            // Tính tọa độ bắt đầu để crop giữa ảnh
            int x = (originalWidth - cropWidth) / 2;
            int y = (originalHeight - cropHeight) / 2;

            // Crop ảnh
            BufferedImage croppedImage = originalImage.getSubimage(x, y, cropWidth, cropHeight);

            // Scale ảnh đã crop
            Image scaledImage = croppedImage.getScaledInstance(targetWidth, targetHeight, Image.SCALE_SMOOTH);

            return new ImageIcon(scaledImage);

        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }

    private void showError(Response<?> response) {
        try {
            String errorBody = response.errorBody() != null ? response.errorBody().string() : "Unknown error";
            System.out.println("Upload error: " + errorBody);
            JOptionPane.showMessageDialog(this, "Tải ảnh thất bại: " + errorBody);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Tải ảnh thất bại: " + response.code());
        }
    }

    private void date() {
        SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy");
        String formattedDate = formatter.format(new Date());

        Calendar calendar = Calendar.getInstance();
        int weekOfYear = calendar.get(Calendar.WEEK_OF_YEAR);

        jLabel_ngayhientai.setText("Ngày hôm nay: " + formattedDate + " - Tuần: " + weekOfYear);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminHome(123).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton_add_dep;
    private javax.swing.JButton jButton_avatar_dep;
    private javax.swing.JButton jButton_delete_dep;
    private javax.swing.JButton jButton_reset_depa;
    private javax.swing.JButton jButton_themBacSi;
    private javax.swing.JButton jButton_update_dep;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel155;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel_admin_email;
    private javax.swing.JLabel jLabel_admin_email1;
    private javax.swing.JLabel jLabel_admin_name;
    private javax.swing.JLabel jLabel_admin_name1;
    private javax.swing.JLabel jLabel_avatar_department;
    private javax.swing.JLabel jLabel_dsbs_khoa;
    private javax.swing.JLabel jLabel_ngayhientai;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPanel jPanel_admin;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable_departments;
    private javax.swing.JTable jTable_doctor;
    private javax.swing.JTextArea jTextArea_department_description;
    private javax.swing.JTextField jTextField_department_anhNen;
    private javax.swing.JTextField jTextField_department_name;
    // End of variables declaration//GEN-END:variables
}
