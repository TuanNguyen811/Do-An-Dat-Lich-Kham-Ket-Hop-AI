package com.example.app1.dialog;

import android.content.Context;
import android.os.Bundle;
import android.text.Html;
import android.text.Spanned;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.TextView;

import androidx.core.content.ContextCompat;

import com.example.app1.API.ApiClient;
import com.example.app1.API.AuthService;
import com.example.app1.R;
import com.example.app1.models.ChatHistoryResponse;
import com.example.app1.models.ChatRequest;
import com.example.app1.models.ChatResponse;
import com.example.app1.models.Patient;
import com.example.app1.models.PatientHealthMetrics;
import com.example.app1.utils.SessionManager;
import com.google.android.material.bottomsheet.BottomSheetDialogFragment;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

public class ResearchHealthDetailBottomSheet extends BottomSheetDialogFragment {
    private TextView textViewPatientName, textViewPatientPhone,
            textViewPatientGender, textViewPatientAge, textViewResearchDate, textViewResearchResult;
    private ImageView buttonClose ;
    private Button buttonAdice, buttonResearchAgain;
    private OnButtonClickListener listener;

    private Patient patient;
    private PatientHealthMetrics patientHealthMetrics;

    private ProgressBar progressBar;
    private AuthService apiService;
    private SessionManager sessionManager;

    public interface OnButtonClickListener {
        void onAdviceButtonClick();
        void onResearchAgainButtonClick();
    }

    @Override
    public void onAttach(Context context) {
        super.onAttach(context);
        if (context instanceof ResearchHealthDetailBottomSheet.OnButtonClickListener) {
            listener = (ResearchHealthDetailBottomSheet.OnButtonClickListener) context;
        } else {
            throw new RuntimeException(context.toString() + " must implement DoctorSelectionListener");
        }
    }
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        // Inflate layout c·ªßa BottomSheet
        View view = inflater.inflate(R.layout.bottom_sheet_research, container, false);
        apiService = ApiClient.getAuthService(getContext());
        sessionManager = new SessionManager(getContext());
        // Kh·ªüi t·∫°o c√°c view
        textViewPatientName = view.findViewById(R.id.textView_research_patient_name);
        textViewPatientPhone = view.findViewById(R.id.textView_research_patient_phone);
        textViewPatientGender = view.findViewById(R.id.textView_research_patient_gender);
        textViewPatientAge = view.findViewById(R.id.textView_research_patient_dob);
        textViewResearchDate = view.findViewById(R.id.textView_research_result_time);
        textViewResearchResult = view.findViewById(R.id.textView_research_result);
        progressBar = view.findViewById(R.id.progressBar_research);
        // L·∫•y d·ªØ li·ªáu t·ª´ arguments (ƒë∆∞·ª£c truy·ªÅn t·ª´ Activity)

        patient = (Patient) getArguments().getSerializable("patient");
        patientHealthMetrics = (PatientHealthMetrics) getArguments().getSerializable("patient_health_metrics");
        if (patient != null) {
            textViewPatientName.setText(patient.getFull_name());
            textViewPatientPhone.setText(patient.getPhone());
            textViewPatientGender.setText(patient.getGender());
            textViewPatientAge.setText(String.valueOf(patient.getDate_of_birth()));
        }
        buttonClose = view.findViewById(R.id.btn_close_bottom_sheet_research);
        buttonAdice = view.findViewById(R.id.btn_cancel_research_advice);
        buttonResearchAgain = view.findViewById(R.id.btn_research_again);
        buttonResearchAgain.setBackgroundTintList(ContextCompat.getColorStateList(getContext(), R.color.dark_blue));
        buttonAdice.setBackgroundTintList(ContextCompat.getColorStateList(getContext(), R.color.dark_blue));

        buttonClose.setOnClickListener(v -> dismiss());
        buttonAdice.setOnClickListener(v -> {
            if (listener != null) {
                listener.onAdviceButtonClick();
            }
            dismiss();
        });
        buttonResearchAgain.setOnClickListener(v -> {
            if (listener != null) {
                listener.onResearchAgainButtonClick();
            }
            dismiss();
        });

        researchHealth(patientHealthMetrics, patient);
        return view;
    }

    private void researchHealth(PatientHealthMetrics metrics, Patient patient_user) {
        StringBuilder message = new StringBuilder();

        message.append("! B·∫°n l√† m·ªôt b√°c sƒ© AI.*\n" +
                "H√£y ph√¢n t√≠ch t√¨nh tr·∫°ng s·ª©c kh·ªèe c·ªßa b·ªánh nh√¢n d·ª±a tr√™n c√°c ch·ªâ s·ªë sau, n·∫øu ch·ªâ s·ªë n√†o b·∫±ng 0 th√¨ h√£y **b·ªè qua v√† kh√¥ng ƒë·ªÅ c·∫≠p ƒë·∫øn** (c√≥ th·ªÉ ch∆∞a c√≥ d·ªØ li·ªáu). N·∫øu ƒë√£ ƒë∆∞·ª£c h·ªèi tr∆∞·ªõc ƒë√≥, h√£y ph√¢n t√≠ch l·∫°i d·ª±a tr√™n th√¥ng tin d∆∞·ªõi ƒë√¢y.\n\n" +
                "ƒê·ªëi v·ªõi m·ªói ch·ªâ s·ªë:\n" +
                "- ƒê√°nh gi√° gi√° tr·ªã l√† b√¨nh th∆∞·ªùng, cao hay th·∫•p.\n" +
                "- N·∫øu b·∫•t th∆∞·ªùng, h√£y ƒë∆∞a ra **l·ªùi khuy√™n ng·∫Øn g·ªçn** v√† d·ªÖ hi·ªÉu.\n" +
                "- N·∫øu b√¨nh th∆∞·ªùng, ch·ªâ c·∫ßn ghi nh·∫≠n ƒëi·ªÅu ƒë√≥.\n\n" +
                "*Cu·ªëi c√πng, t·ªïng k·∫øt s∆° b·ªô t√¨nh tr·∫°ng s·ª©c kh·ªèe t·ªïng th·ªÉ v√† khuy·∫øn ngh·ªã n·∫øu c·∫ßn.*\n\n" +
                "üìã Th√¥ng tin b·ªánh nh√¢n:\n" +
                "- H·ªç t√™n: " + patient_user.getFull_name() + "\n" +
                "- Gi·ªõi t√≠nh: " + patient_user.getGender() + "\n" +
                "- Ng√†y sinh: " + patient_user.getDate_of_birth() + "\n\n" +
                "üìà C√°c ch·ªâ s·ªë s·ª©c kh·ªèe:\n");
        if (metrics.getSystolic_bp() != 0)
            message.append("* **Huy·∫øt √°p t√¢m thu (Systolic BP):** ").append(metrics.getSystolic_bp()).append(" mmHg\n");
        if (metrics.getDiastolic_bp() != 0)
            message.append("* **Huy·∫øt √°p t√¢m tr∆∞∆°ng (Diastolic BP):** ").append(metrics.getDiastolic_bp()).append(" mmHg\n");
        if (metrics.getHeart_rate() != 0)
            message.append("* **Nh·ªãp tim (Heart Rate):** ").append(metrics.getHeart_rate()).append(" bpm\n");
        if (metrics.getBody_temperature() != 0.0f)
            message.append("* **Nhi·ªát ƒë·ªô c∆° th·ªÉ (Body Temperature):** ").append(metrics.getBody_temperature()).append(" ¬∞C\n");
        if (metrics.getRespiratory_rate() != 0)
            message.append("* **T·∫ßn s·ªë h√¥ h·∫•p (Respiratory Rate):** ").append(metrics.getRespiratory_rate()).append(" l·∫ßn/ph√∫t\n");
        if (metrics.getWeight_kg() != 0.0f)
            message.append("* **C√¢n n·∫∑ng (Weight):** ").append(metrics.getWeight_kg()).append(" kg\n");
        if (metrics.getHeight_cm() != 0.0f)
            message.append("* **Chi·ªÅu cao (Height):** ").append(metrics.getHeight_cm()).append(" cm\n");
        if (metrics.getBmi() != 0.0f)
            message.append("* **Ch·ªâ s·ªë kh·ªëi c∆° th·ªÉ (BMI):** ").append(metrics.getBmi()).append("\n");
        if (metrics.getBlood_glucose() != 0.0f)
            message.append("* **ƒê∆∞·ªùng huy·∫øt (Blood Glucose):** ").append(metrics.getBlood_glucose()).append(" mg/dL\n");
        if (metrics.getCholesterol_total() != 0.0f)
            message.append("* **Cholesterol to√†n ph·∫ßn (Total Cholesterol):** ").append(metrics.getCholesterol_total()).append(" mg/dL\n");
        if (metrics.getLdl() != 0.0f)
            message.append("* **LDL Cholesterol (LDL):** ").append(metrics.getLdl()).append(" mg/dL\n");
        if (metrics.getHdl() != 0.0f)
            message.append("* **HDL Cholesterol (HDL):** ").append(metrics.getHdl()).append(" mg/dL\n");
        if (metrics.getTriglycerides() != 0.0f)
            message.append("* **Triglycerides:** ").append(metrics.getTriglycerides()).append(" mg/dL\n");
        if (metrics.getHemoglobin() != 0.0f)
            message.append("* **Hemoglobin:** ").append(metrics.getHemoglobin()).append(" g/dL\n");

        sendMessageToApi(message.toString());
    }


    private void sendMessageToApi(String message) {
        showLoading(true);
        String token = "Bearer " + sessionManager.getToken();
        ChatRequest request = new ChatRequest(message);

        apiService.sendChatMessage(token, request).enqueue(new Callback<ChatResponse>() {
            @Override
            public void onResponse(Call<ChatResponse> call, Response<ChatResponse> response) {
                showLoading(false);
                if (response.isSuccessful() && response.body() != null) {
                    ChatResponse botResponse = response.body();

                    String formatted = botResponse.getReply()
                            .replaceAll("\\*\\*(.*?)\\*\\*", "<b>$1</b>")         // **bold**
                            .replaceAll("\\*(.*?)\\*", "<i>$1</i>")               // *italic*
                            .replaceAll("\\*/(.*?)\\*/", "<u>$1</u>")             // */underline*/
                            .replaceAll("\\n", "<br>");                           // xu·ªëng d√≤ng

                    Spanned spanned = Html.fromHtml(formatted, Html.FROM_HTML_MODE_LEGACY);
                    textViewResearchResult.setText(spanned);
                    textViewResearchDate.setText(botResponse.getTime_vn());
                } else {
                    textViewResearchDate.setText("Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu");
                    textViewResearchResult.setText("Xin l·ªói, c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.");
                }
            }

            @Override
            public void onFailure(Call<ChatResponse> call, Throwable t) {
                showLoading(false);
                textViewResearchDate.setText("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng v√† th·ª≠ l·∫°i.");

            }
        });
    }
    private void showLoading(boolean isLoading) {
        if (isLoading) {
            progressBar.setVisibility(View.VISIBLE);
        } else {
            progressBar.setVisibility(View.GONE);
        }
    }
    @Override
    public int getTheme() {
        return R.style.BottomSheetTheme;
    }
}
