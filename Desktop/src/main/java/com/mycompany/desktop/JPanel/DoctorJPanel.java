/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.desktop.JPanel;

import com.mycompany.desktop.API.APIClient;
import com.mycompany.desktop.API.AuthService;
import com.mycompany.desktop.models.Appointment;
import com.mycompany.desktop.models.AvatarResponse;
import com.mycompany.desktop.models.Department;
import com.mycompany.desktop.models.Doctor;
import com.mycompany.desktop.models.DoctorSchedule;
import com.mycompany.desktop.utils.DateUtils;
import com.mycompany.desktop.utils.SessionManager;
import com.mycompany.desktop.utils.ValidationUtils;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import javax.imageio.IIOImage;
import javax.imageio.ImageIO;
import javax.imageio.ImageWriteParam;
import javax.imageio.ImageWriter;
import javax.imageio.stream.ImageOutputStream;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.RequestBody;
import okhttp3.ResponseBody;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

/**
 *
 * @author admin
 */
public class DoctorJPanel extends javax.swing.JPanel {

    private AuthService authService;
    private List<DoctorSchedule> listDoctorSchedules;
    private List<Appointment> listAppointments;
    private Doctor doctor;

    private int weekOfYear;

    /**
     * Creates new form NewJPanel
     */
    public DoctorJPanel(Doctor doctor) {
        this.doctor = doctor;
        initComponents();
        authService = APIClient.getAuthService();
        SessionManager.getInstance().setCurrentUserId(1);

        setDoctor_toUI(doctor);
        loadListDoctorSchedul(doctor.getUser_id());
        loadListAppointments("", doctor.getUser_id());

        date();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jRadioButton_bacsi_nam = new javax.swing.JRadioButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea_bacsi_description = new javax.swing.JTextArea();
        jLabel12 = new javax.swing.JLabel();
        jTextField_bacsi_email = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jRadioButton_bacsi_nu = new javax.swing.JRadioButton();
        jLabel9 = new javax.swing.JLabel();
        jTextField_bacsi_address = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField_bacsi_department_id = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel_avatar = new javax.swing.JLabel();
        jLable_bacsi_avatar_url = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel_bacsi_loi = new javax.swing.JLabel();
        jPasswordField_bacsi_pass = new javax.swing.JPasswordField();
        jTextField_bacsi_brithdate = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton9 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jTextField_bacsi_phone = new javax.swing.JTextField();
        jTextField_bacsi_name = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable_DoctorSchedul = new javax.swing.JTable();
        jLabel_ngayhientai = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTable_Appointments = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel_thongTinBacSi = new javax.swing.JLabel();

        setToolTipText("");

        jRadioButton_bacsi_nam.setText("Male");

        jTextArea_bacsi_description.setColumns(20);
        jTextArea_bacsi_description.setRows(3);
        jScrollPane4.setViewportView(jTextArea_bacsi_description);

        jLabel12.setText("Description");

        jTextField_bacsi_email.setEnabled(false);

        jLabel11.setText("Address");

        jLabel14.setText("Department_id");

        jRadioButton_bacsi_nu.setText("Female");

        jLabel9.setText("Gender");

        jLabel2.setText("Email");

        jLabel13.setText("Avatar_url");

        jLabel_avatar.setText("avatar");
        jLabel_avatar.setToolTipText("");
        jLabel_avatar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel_avatarMouseClicked(evt);
            }
        });

        jLable_bacsi_avatar_url.setText("file");

        jLabel10.setText("Password");

        jLabel8.setText("BirthDate     YYYY-MM-DD");

        jLabel4.setText("Phone");

        jLabel3.setText("Name");

        jButton9.setText("Xóa bác sĩ");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton8.setText("Cập nhật thông tin");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(202, Short.MAX_VALUE)
                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(146, 146, 146))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(34, 34, 34)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel_avatar, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel11)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLable_bacsi_avatar_url))
                            .addComponent(jLabel12)
                            .addComponent(jLabel8)
                            .addComponent(jLabel4)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel_bacsi_loi)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane4)
                            .addComponent(jTextField_bacsi_email)
                            .addComponent(jTextField_bacsi_phone)
                            .addComponent(jTextField_bacsi_address)
                            .addComponent(jPasswordField_bacsi_pass)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jTextField_bacsi_brithdate, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jRadioButton_bacsi_nam)
                                        .addGap(32, 32, 32)
                                        .addComponent(jRadioButton_bacsi_nu))
                                    .addComponent(jLabel9)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jTextField_bacsi_name, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel14)
                                    .addComponent(jTextField_bacsi_department_id, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap(35, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(575, Short.MAX_VALUE)
                .addComponent(jButton9)
                .addContainerGap())
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel_avatar, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addGap(5, 5, 5)
                            .addComponent(jTextField_bacsi_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel14)
                            .addGap(4, 4, 4)
                            .addComponent(jTextField_bacsi_department_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jLabel2)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jTextField_bacsi_email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(2, 2, 2)
                    .addComponent(jLabel4)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jTextField_bacsi_phone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(1, 1, 1)
                            .addComponent(jLabel8)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTextField_bacsi_brithdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel9)
                            .addGap(0, 0, 0)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jRadioButton_bacsi_nam)
                                .addComponent(jRadioButton_bacsi_nu))))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jLabel11)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jTextField_bacsi_address, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel13)
                        .addComponent(jLable_bacsi_avatar_url))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jLabel12)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jLabel10)
                    .addGap(7, 7, 7)
                    .addComponent(jPasswordField_bacsi_pass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jLabel_bacsi_loi)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jButton8)
                    .addContainerGap()))
        );

        jPanel2.add(jPanel1);

        jTabbedPane2.addTab("Thông tin bác sĩ:", jPanel2);

        jTable_DoctorSchedul.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, "10-10-10-10", null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Tuần", "T2", "T3", "T4", "T5", "T6", "T7", "CN"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane6.setViewportView(jTable_DoctorSchedul);

        jLabel_ngayhientai.setText("Ngày");

        jButton1.setText("Cập nhật");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel18.setText("Lịch làm việc bác sĩ của bác sĩ:");

        jButton11.setText("Thêm lịch");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton12.setText("Xóa");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 654, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton12))
                    .addComponent(jLabel18)
                    .addComponent(jLabel_ngayhientai))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel_ngayhientai)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton11)
                    .addComponent(jButton12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 533, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Lịch làm việc", jPanel6);

        jTable_Appointments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Tên bệnh nhân", "Gmail", "Ngày", "Thời gian"
            }
        ));
        jScrollPane7.setViewportView(jTable_Appointments);

        jButton2.setText("Lịch theo ngày");

        jButton3.setText("Tất cả lịch");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 671, Short.MAX_VALUE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap(67, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 555, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane2.addTab("Lịch hẹn khám", jPanel7);

        jLabel_thongTinBacSi.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel_thongTinBacSi.setText("THÔNG TIN BÁC SĨ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel_thongTinBacSi)
                    .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 683, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel_thongTinBacSi)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 704, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
  private Doctor getDoctorFromUI() {
        Doctor doctor = new Doctor();
        char[] passChars = jPasswordField_bacsi_pass.getPassword();
        String password = new String(passChars);

        // Kiểm tra dữ liệu nhập vào
        if (!ValidationUtils.isValidName(jTextField_bacsi_name.getText())) {
            jLabel_bacsi_loi.setText("Please enter your name");
            jTextField_bacsi_name.requestFocus();
            return null;
        }

        if (!ValidationUtils.isValidEmail(jTextField_bacsi_email.getText())) {
            jLabel_bacsi_loi.setText("Please enter a valid email");
            jTextField_bacsi_email.requestFocus();
            return null;
        }

        if (!jTextField_bacsi_phone.getText().isEmpty() && !ValidationUtils.isValidPhone(jTextField_bacsi_phone.getText())) {
            jLabel_bacsi_loi.setText("Please enter a valid phone number");
            jTextField_bacsi_phone.requestFocus();
            return null;
        }

        doctor.setFull_name(jTextField_bacsi_name.getText().trim());
        doctor.setEmail(jTextField_bacsi_email.getText().trim());
        doctor.setPhone(jTextField_bacsi_phone.getText().trim());
        doctor.setDate_of_birth(jTextField_bacsi_brithdate.getText().trim());

        if (jRadioButton_bacsi_nam.isSelected()) {
            doctor.setGender("Male");
        } else if (jRadioButton_bacsi_nu.isSelected()) {
            doctor.setGender("Female");
        }

        doctor.setPassword(password);
        doctor.setAddress(jTextField_bacsi_address.getText().trim()); // Nếu có trường địa chỉ
        doctor.setDescription(jTextArea_bacsi_description.getText().trim());

        doctor.setAvatar_url(jLable_bacsi_avatar_url.getText().trim());

        try {
            doctor.setDepartment_id(Integer.parseInt(jTextField_bacsi_department_id.getText().trim()));
        } catch (NumberFormatException e) {
            doctor.setDepartment_id(0); // Giá trị mặc định nếu không hợp lệ
        }

        return doctor;
    }

    private void setDoctor_toUI(Doctor doctorResponse) {
        jLabel_thongTinBacSi.setText("Thông tin bác sĩ: " + doctorResponse.getFull_name() + " ID: " + doctorResponse.getUser_id());

        jTextField_bacsi_name.setText(doctorResponse.getFull_name());
        jTextField_bacsi_email.setText(doctorResponse.getEmail());
        jTextField_bacsi_phone.setText(doctorResponse.getPhone());
        jTextField_bacsi_brithdate.setText(doctorResponse.getDate_of_birth());
        String gender = doctorResponse.getGender();
        if (gender.equals("Male")) {
            jRadioButton_bacsi_nam.setSelected(true);
        } else if (gender.equals("Female")) {
            jRadioButton_bacsi_nu.setSelected(true);
        }
        jLable_bacsi_avatar_url.setText(doctorResponse.getAvatar_url());
        downloadAvatar(doctorResponse.getUser_id() + "");

        jTextArea_bacsi_description.setText(doctorResponse.getDescription());
        jTextArea_bacsi_description.setLineWrap(true);
        jTextArea_bacsi_description.setWrapStyleWord(true);
        jTextField_bacsi_address.setText(doctorResponse.getAddress());

        jTextField_bacsi_department_id.setText(doctorResponse.getDepartment_id() + "");
        jPasswordField_bacsi_pass.setText("");
    }

    private void updateDoctor(Doctor doctor) {
        String token = SessionManager.getInstance().getToken();

        authService.updateDoctor(token, doctor, doctor.getUser_id()).enqueue(new Callback<Doctor>() {
            @Override
            public void onResponse(Call<Doctor> call, Response<Doctor> response) {

                if (response.isSuccessful() && response.body() != null) {
                    JOptionPane.showMessageDialog(null, "Update successful!" + response.body().getUser_id());
                } else {
                    try {
                        String errorMsg = response.errorBody().string();
                        JOptionPane.showMessageDialog(null, "Failed to Update!\nError: " + errorMsg);
                    } catch (IOException e) {
                        JOptionPane.showMessageDialog(null, "Failed to read error message!");
                    }
                }
            }

            @Override
            public void onFailure(Call<Doctor> call, Throwable thrwbl) {
                JOptionPane.showMessageDialog(null, "Network error: " + thrwbl.getMessage());
            }
        });
    }

    private void deleteDoctor(Doctor doctor) {
        String token = SessionManager.getInstance().getToken();

        authService.deleteDoctor(token, doctor.getUser_id()).enqueue(new Callback<Doctor>() {
            @Override
            public void onResponse(Call<Doctor> call, Response<Doctor> response) {
                if (response.isSuccessful() && response.body() != null) {
                    //thu thoi nhhng chac loi
                    JOptionPane.showMessageDialog(null, "Delete successful!" + response.body().getUser_id());
                    SwingUtilities.getWindowAncestor(DoctorJPanel.this).dispose();
                } else {
                    try {
                        String errorMsg = response.errorBody().string();
                        JOptionPane.showMessageDialog(null, "Failed to Delete!\nError: " + errorMsg);
                    } catch (IOException e) {
                        JOptionPane.showMessageDialog(null, "Failed to read error message!");
                    }
                }
            }

            @Override
            public void onFailure(Call<Doctor> call, Throwable thrwbl) {
                JOptionPane.showMessageDialog(null, "Network error: " + thrwbl.getMessage());
            }
        });
    }

    //Appointments
    private void loadListAppointments(String appointmentDate, int doctorId) {
        listAppointments = new ArrayList<>();
        String token = SessionManager.getInstance().getToken();
        authService.getAppointments(token, doctorId, appointmentDate).enqueue(new Callback<List<Appointment>>() {
            @Override
            public void onResponse(Call<List<Appointment>> call, Response<List<Appointment>> response) {
                if (response.isSuccessful() && response.body() != null) {
                    listAppointments = response.body();

                    listAppointments.sort((a, b) -> {
                        String timeA = a.getShiftName();
                        String timeB = b.getShiftName();
                        return timeA.compareTo(timeB);
                    });
                    listAppointments.sort((a, b) -> {
                        String dateA = a.getAppointmentDate();
                        String dateB = b.getAppointmentDate();
                        return dateA.compareTo(dateB);
                    });
                    setTableAppointments(listAppointments);
                } else {
                    setTableAppointments(listAppointments);

//                    try {
//                        String errorMsg = response.errorBody().string();
//                        JOptionPane.showMessageDialog(null, "Failed to register!\nError: " + errorMsg);
//                    } catch (IOException e) {
//                        JOptionPane.showMessageDialog(null, "Failed to read error message!");
//                    }
                }
            }

            @Override
            public void onFailure(Call<List<Appointment>> call, Throwable thrwbl) {
                throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
            }
        });
    }

    private void setTableAppointments(List<Appointment> appointments) {
        DefaultTableModel model = (DefaultTableModel) jTable_Appointments.getModel();
        model.setRowCount(0);

        for (Appointment appointment : appointments) {
            String shift = "00";
            if (appointment.getShiftName().equals("Shift 1")) {
                shift = "7h-9h";
            } else if (appointment.getShiftName().equals("Shift 2")) {
                shift = "9h-11h";
            } else if (appointment.getShiftName().equals("Shift 3")) {
                shift = "13h-15h";
            } else if (appointment.getShiftName().equals("Shift 4")) {
                shift = "15h-17h";
            }
            model.addRow(new Object[]{
                appointment.getPatientName(),
                appointment.getPatientPhone(),
                DateUtils.formatDate(appointment.getAppointmentDate()),
                shift
            });
        }
    }

    //DoctorSchedules
    private void loadListDoctorSchedul(int doctor_id) {
        String token = SessionManager.getInstance().getToken();
        listDoctorSchedules = new ArrayList<>();
        authService.getSchedule(token, doctor_id).enqueue(new Callback<List<DoctorSchedule>>() {
            @Override
            public void onResponse(Call<List<DoctorSchedule>> call, Response<List<DoctorSchedule>> response) {
                if (response.isSuccessful() && response.body() != null) {
                    listDoctorSchedules = response.body();
                    setTableDoctorSchedules(listDoctorSchedules);

                } else {
                    try {
                        String errorMsg = response.errorBody().string();
                        JOptionPane.showMessageDialog(null, "Failed to register!\nError: " + errorMsg);
                    } catch (IOException e) {
                        JOptionPane.showMessageDialog(null, "Failed to read error message!");
                    }
                }
            }

            @Override
            public void onFailure(Call<List<DoctorSchedule>> call, Throwable thrwbl) {
                JOptionPane.showMessageDialog(null, "Network error: " + thrwbl.getMessage());
            }
        });
    }

    private void setTableDoctorSchedules(List<DoctorSchedule> doctorSchedules) {
        DefaultTableModel model = (DefaultTableModel) jTable_DoctorSchedul.getModel();
        model.setRowCount(0);

        for (DoctorSchedule doctorSchedule : doctorSchedules) {
            if (doctorSchedule.getWeek() == this.weekOfYear) {
                model.addRow(new Object[]{
                    "Hiện Tại: " + doctorSchedule.getWeek(),
                    doctorSchedule.getMonday(),
                    doctorSchedule.getTuesday(),
                    doctorSchedule.getWednesday(),
                    doctorSchedule.getThursday(),
                    doctorSchedule.getFriday(),
                    doctorSchedule.getSaturday(),
                    doctorSchedule.getSunday()
                });
            } else {
                model.addRow(new Object[]{
                    doctorSchedule.getWeek(),
                    doctorSchedule.getMonday(),
                    doctorSchedule.getTuesday(),
                    doctorSchedule.getWednesday(),
                    doctorSchedule.getThursday(),
                    doctorSchedule.getFriday(),
                    doctorSchedule.getSaturday(),
                    doctorSchedule.getSunday()
                });

            }
        }
    }

    private void create_DoctorSchedules(int doctor_id, int week) {
        DoctorSchedule doctorSchedule = new DoctorSchedule(doctor_id, week,
                "10-10-10-10", "10-10-10-10", "10-10-10-10", "10-10-10-10", "10-10-10-10", "0-0-0-0", "0-0-0-0");

        String toke = SessionManager.getInstance().getToken();

        authService.createSchedule(toke, doctorSchedule).enqueue(new Callback<DoctorSchedule>() {
            @Override
            public void onResponse(Call<DoctorSchedule> call, Response<DoctorSchedule> response) {
                loadListDoctorSchedul(doctor_id);
                if (response.isSuccessful()) {
                    JOptionPane.showMessageDialog(null, "Registration successful! Please login.");
                } else {
                    try {
                        String errorMsg = response.errorBody().string();
                        //JOptionPane.showMessageDialog(null, "Failed to register!\nError: " + errorMsg);
                    } catch (IOException e) {
                        //JOptionPane.showMessageDialog(null, "Failed to read error message!");
                    }
                }
            }

            @Override
            public void onFailure(Call<DoctorSchedule> call, Throwable thrwbl) {
                JOptionPane.showMessageDialog(null, "Network error: " + thrwbl.getMessage());
            }
        });

    }

    private void delete_DoctorSchedules() {
        int row = jTable_DoctorSchedul.getSelectedRow();
        if (row == -1) {
            return;
        }

        DoctorSchedule doctorSchedule = listDoctorSchedules.get(row);
        String token = SessionManager.getInstance().getToken();

        authService.deleteSchedule(token, doctorSchedule.getSchedule_id()).enqueue(new Callback<DoctorSchedule>() {
            @Override
            public void onResponse(Call<DoctorSchedule> call, Response<DoctorSchedule> response) {
                if (response.isSuccessful()) {
                    JOptionPane.showMessageDialog(null, "Delete successful.");
                    loadListDoctorSchedul(doctorSchedule.getDoctorId());

                } else {
                    try {
                        String errorMsg = response.errorBody().string();
                        JOptionPane.showMessageDialog(null, "Failed to register!\nError: " + errorMsg);
                    } catch (IOException e) {
                        JOptionPane.showMessageDialog(null, "Failed to read error message!");
                    }
                }
            }

            @Override
            public void onFailure(Call<DoctorSchedule> call, Throwable thrwbl) {
                JOptionPane.showMessageDialog(null, "Failed to read error message!");
            }
        });
    }

    private void update_DoctorSchedules() {
        int row = jTable_DoctorSchedul.getSelectedRow();
        if (row == -1) {
            return;
        }

        DoctorSchedule doctorSchedule = listDoctorSchedules.get(row);

        DoctorSchedule schedule
                = new DoctorSchedule(doctorSchedule.getDoctorId(), doctorSchedule.getWeek(),
                        jTable_DoctorSchedul.getValueAt(row, 1).toString(),
                        jTable_DoctorSchedul.getValueAt(row, 2).toString(),
                        jTable_DoctorSchedul.getValueAt(row, 3).toString(),
                        jTable_DoctorSchedul.getValueAt(row, 4).toString(),
                        jTable_DoctorSchedul.getValueAt(row, 5).toString(),
                        jTable_DoctorSchedul.getValueAt(row, 6).toString(),
                        jTable_DoctorSchedul.getValueAt(row, 7).toString());

        String token = SessionManager.getInstance().getToken();

        authService.updateSchedule(token, doctorSchedule.getSchedule_id(), schedule).enqueue(new Callback<DoctorSchedule>() {
            @Override
            public void onResponse(Call<DoctorSchedule> call, Response<DoctorSchedule> response) {
                if (response.isSuccessful()) {
                    JOptionPane.showMessageDialog(null, "Update successful! Please login.");
                    loadListDoctorSchedul(doctorSchedule.getDoctorId());

                } else {
                    try {
                        String errorMsg = response.errorBody().string();
                        JOptionPane.showMessageDialog(null, "Failed to register!\nError: " + errorMsg);
                    } catch (IOException e) {
                        JOptionPane.showMessageDialog(null, "Failed to read error message!");
                    }
                }
            }

            @Override
            public void onFailure(Call<DoctorSchedule> call, Throwable thrwbl) {
                JOptionPane.showMessageDialog(null, "Failed to read error message!");
            }
        });
    }

    //Avatar,other
    public static void compressImage(File inputFile, File outputFile, long targetSize) throws IOException {
        BufferedImage image = ImageIO.read(inputFile);

        float quality = 1.0f; // Bắt đầu với chất lượng cao nhất
        while (true) {
            try (FileOutputStream fos = new FileOutputStream(outputFile); ImageOutputStream ios = ImageIO.createImageOutputStream(fos)) {

                Iterator<ImageWriter> writers = ImageIO.getImageWritersByFormatName("jpg");
                if (!writers.hasNext()) {
                    throw new IllegalStateException("No writers found");
                }
                ImageWriter writer = writers.next();
                writer.setOutput(ios);

                ImageWriteParam param = writer.getDefaultWriteParam();
                param.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);
                param.setCompressionQuality(quality);

                writer.write(null, new IIOImage(image, null, null), param);
                writer.dispose();
            }

            if (outputFile.length() <= targetSize || quality <= 0.1f) {
                break;
            }

            quality -= 0.05f; // Giảm chất lượng dần dần
        }
    }

    private void uploadAvatar(String user_id) {
        JFileChooser fileChooser = new JFileChooser();
        if (fileChooser.showOpenDialog(this) != JFileChooser.APPROVE_OPTION) {
            JOptionPane.showMessageDialog(this, "bi gi do");
            return;
        }

        File file = fileChooser.getSelectedFile();
        if (!file.exists() || !file.canRead()) {
            JOptionPane.showMessageDialog(this, "Không thể đọc file được chọn");
            return;
        }

        if (file.length() > 5_000_000) {
            JOptionPane.showMessageDialog(this, "File quá lớn (tối đa 5MB)");
            return;
        }

        File inputFile = fileChooser.getSelectedFile();
        File outputFile = new File("compressed.jpg"); // Ảnh sau khi giảm kích thước

        try {
            compressImage(inputFile, outputFile, 100 * 1024); // 100KB
            System.out.println("Image compressed successfully!");
        } catch (IOException e) {
            e.printStackTrace();
        }

        RequestBody requestFile = RequestBody.create(MediaType.parse("image/*"), outputFile);
        MultipartBody.Part body = MultipartBody.Part.createFormData("file", outputFile.getName(), requestFile);

        String token = SessionManager.getInstance().getToken();

        authService.adminSetAvatarUser(body, token, user_id).enqueue(new Callback<AvatarResponse>() {
            @Override
            public void onResponse(Call<AvatarResponse> call, Response<AvatarResponse> response) {
                if (response.isSuccessful()) {
                    JOptionPane.showMessageDialog(DoctorJPanel.this, "Tải ảnh đại diện thành công");
                    downloadAvatar(doctor.getUser_id() + "");
                } else {
                    showError(response);
                }
            }

            @Override
            public void onFailure(Call<AvatarResponse> call, Throwable t) {
                t.printStackTrace();
            }

            private void showError(Response<AvatarResponse> response) {
                throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
            }
        });

        // Reset selectedAvatarFile sau khi đã xử lý
    }

    private void downloadAvatar(String user_id) {
        String token = SessionManager.getInstance().getToken();

        authService.adminGetAvatarUser(token, user_id).enqueue(new Callback<ResponseBody>() {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                if (response.isSuccessful() && response.body() != null) {
                    try (InputStream inputStream = response.body().byteStream()) {
                        byte[] bytes = inputStream.readAllBytes();

//                        ImageIcon avatarIcon = new ImageIcon(bytes);
//                        Image scaledImage = avatarIcon.getImage().getScaledInstance(100, 100, Image.SCALE_SMOOTH);
//                        jLabel_avatar.setIcon(new ImageIcon(scaledImage));
//                        jLabel_avatar.setText("");
                        ImageIcon avatarIcon = cropAndScaleImage(bytes, 100, 100);

                        if (avatarIcon != null) {
                            jLabel_avatar.setIcon(avatarIcon);
                            jLabel_avatar.setText("");
                        }

                    } catch (IOException e) {
                        jLabel_avatar.setText("Không thể tải ảnh đại diện");
                        jLabel_avatar.setIcon(null);
                    }
                } else {
                    jLabel_avatar.setText("Không thể tải ảnh đại diện");
                    jLabel_avatar.setIcon(null);
                }
            }

            @Override
            public void onFailure(Call<ResponseBody> call, Throwable t) {
                JOptionPane.showMessageDialog(DoctorJPanel.this, "Lỗi: " + t.getMessage());
            }

        });
    }

    public ImageIcon cropAndScaleImage(byte[] imageBytes, int targetWidth, int targetHeight) {
        try {
            BufferedImage originalImage = ImageIO.read(new ByteArrayInputStream(imageBytes));

            int originalWidth = originalImage.getWidth();
            int originalHeight = originalImage.getHeight();

            float originalRatio = (float) originalWidth / originalHeight;
            float targetRatio = (float) targetWidth / targetHeight;

            int cropWidth = originalWidth;
            int cropHeight = originalHeight;

            // Cắt ảnh theo chiều phù hợp để giữ đúng tỉ lệ
            if (originalRatio > targetRatio) {
                // Cắt chiều rộng
                cropWidth = (int) (originalHeight * targetRatio);
            } else {
                // Cắt chiều cao
                cropHeight = (int) (originalWidth / targetRatio);
            }

            // Tính tọa độ bắt đầu để crop giữa ảnh
            int x = (originalWidth - cropWidth) / 2;
            int y = (originalHeight - cropHeight) / 2;

            // Crop ảnh
            BufferedImage croppedImage = originalImage.getSubimage(x, y, cropWidth, cropHeight);

            // Scale ảnh đã crop
            Image scaledImage = croppedImage.getScaledInstance(targetWidth, targetHeight, Image.SCALE_SMOOTH);

            return new ImageIcon(scaledImage);

        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }

    //other
    private void date() {

        SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy");
        String formattedDate = formatter.format(new Date());

        Calendar calendar = Calendar.getInstance();
        weekOfYear = calendar.get(Calendar.WEEK_OF_YEAR);

        jLabel_ngayhientai.setText("Ngày hôm nay: " + formattedDate + " - Tuần: " + weekOfYear);
    }

    //BUTTON
    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        int result = JOptionPane.showConfirmDialog(
                null,
                "Bạn có chắc chắn muốn xóa?",
                "Xác nhận xóa",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE
        );

        if (result == JOptionPane.YES_OPTION) {
            deleteDoctor(doctor);
        } else {
            System.out.println("Đã hủy xóa");
        }
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jLabel_avatarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel_avatarMouseClicked
        uploadAvatar(this.doctor.getUser_id() + "");
    }//GEN-LAST:event_jLabel_avatarMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        update_DoctorSchedules();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed

        //  setDoctor_toUI(this.doctor);
        if (listDoctorSchedules.isEmpty()) {
            Calendar calendar = Calendar.getInstance();
            int weekOfYear = calendar.get(Calendar.WEEK_OF_YEAR);
            create_DoctorSchedules(this.doctor.getUser_id(), weekOfYear);
        } else {
            DoctorSchedule doctorSchedule = listDoctorSchedules.getLast();
            int weekLast = doctorSchedule.getWeek();
            create_DoctorSchedules(this.doctor.getUser_id(), weekLast + 1);
        }

    }//GEN-LAST:event_jButton11ActionPerformed


    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        delete_DoctorSchedules();
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        Doctor doctor2 = getDoctorFromUI();
        doctor2.setUser_id(this.doctor.getUser_id());
        
        updateDoctor(doctor2);
    }//GEN-LAST:event_jButton8ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel_avatar;
    private javax.swing.JLabel jLabel_bacsi_loi;
    private javax.swing.JLabel jLabel_ngayhientai;
    private javax.swing.JLabel jLabel_thongTinBacSi;
    private javax.swing.JLabel jLable_bacsi_avatar_url;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPasswordField jPasswordField_bacsi_pass;
    private javax.swing.JRadioButton jRadioButton_bacsi_nam;
    private javax.swing.JRadioButton jRadioButton_bacsi_nu;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTable jTable_Appointments;
    private javax.swing.JTable jTable_DoctorSchedul;
    private javax.swing.JTextArea jTextArea_bacsi_description;
    private javax.swing.JTextField jTextField_bacsi_address;
    private javax.swing.JTextField jTextField_bacsi_brithdate;
    private javax.swing.JTextField jTextField_bacsi_department_id;
    private javax.swing.JTextField jTextField_bacsi_email;
    private javax.swing.JTextField jTextField_bacsi_name;
    private javax.swing.JTextField jTextField_bacsi_phone;
    // End of variables declaration//GEN-END:variables
}
